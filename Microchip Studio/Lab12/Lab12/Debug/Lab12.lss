
Lab12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074a  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ad  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026a  00000000  00000000  00000fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000369  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001671  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPI_byte_send>:

	//This function send one byte through AVR SPI module
	//This function should ensure that existing communication is complete
	//PORTC = SPSR;
	
	SPDR = ebyte;  
  80:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  82:	0d b4       	in	r0, 0x2d	; 45
  84:	07 fe       	sbrs	r0, 7
  86:	fd cf       	rjmp	.-6      	; 0x82 <SPI_byte_send+0x2>
}  void write_SPI_DAC(unsigned int val)
  88:	08 95       	ret

0000008a <write_SPI_DAC>:
{
  8a:	cf 93       	push	r28
  8c:	c8 2f       	mov	r28, r24
	//clear SS
	PORTB &= ~(1<<SS);
  8e:	85 b1       	in	r24, 0x05	; 5
  90:	8b 7f       	andi	r24, 0xFB	; 251
  92:	85 b9       	out	0x05, r24	; 5
	
	//Send upper byte (0b0000xxxx) where xxxx is upper four bits of Digital data
	//Upper nible zero suggest GA'=0 SHDN'=0
	SPI_byte_send(0b00110000 | ( (val>>8) & 0x0F )); //send upper byte
  94:	89 2f       	mov	r24, r25
  96:	8f 70       	andi	r24, 0x0F	; 15
  98:	80 63       	ori	r24, 0x30	; 48
  9a:	0e 94 40 00 	call	0x80	; 0x80 <SPI_byte_send>
	
	//Send lower 8 bits of digital data
	SPI_byte_send( val & 0xFF ); //send lower byte
  9e:	8c 2f       	mov	r24, r28
  a0:	0e 94 40 00 	call	0x80	; 0x80 <SPI_byte_send>
	
	//Set SS
	PORTB |= (1<<SS);
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	85 b9       	out	0x05, r24	; 5
	
	//_delay_us(50);
	
}  void SPI_Init()
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <SPI_Init>:
{
	DDRB |= (1<<SS) | (1<<MOSI) | (1<<SCK);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	8c 62       	ori	r24, 0x2C	; 44
  b2:	84 b9       	out	0x04, r24	; 4

	SPCR |= (1<<SPE) | (1<<MSTR);
  b4:	8c b5       	in	r24, 0x2c	; 44
  b6:	80 65       	ori	r24, 0x50	; 80
  b8:	8c bd       	out	0x2c, r24	; 44
  ba:	08 95       	ret

000000bc <main>:
void write_SPI_DAC(unsigned int val); 
void SPI_Init(void); 

int main(void)
{     unsigned int val = 0;
	DDRC=0xFF;  	SPI_Init();
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 b9       	out	0x07, r24	; 7
  c0:	0e 94 57 00 	call	0xae	; 0xae <SPI_Init>
	while (1)    
	 {
		for(int i=0;i<4096;i++)
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	d0 e0       	ldi	r29, 0x00	; 0
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <main+0x16>
			write_SPI_DAC(i);
  ca:	ce 01       	movw	r24, r28
  cc:	0e 94 45 00 	call	0x8a	; 0x8a <write_SPI_DAC>
int main(void)
{     unsigned int val = 0;
	DDRC=0xFF;  	SPI_Init();
	while (1)    
	 {
		for(int i=0;i<4096;i++)
  d0:	21 96       	adiw	r28, 0x01	; 1
  d2:	c1 15       	cp	r28, r1
  d4:	80 e1       	ldi	r24, 0x10	; 16
  d6:	d8 07       	cpc	r29, r24
  d8:	c4 f3       	brlt	.-16     	; 0xca <main+0xe>
  da:	f4 cf       	rjmp	.-24     	; 0xc4 <main+0x8>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
