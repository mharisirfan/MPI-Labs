
Lab11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c6  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000780  00000000  00000000  00000c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d6  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040f  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000323  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001f66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  88:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Init>:
	do{
		ch = USART_Receive();
		str[i] = ch;
		i++;
	}while(ch != '\0');
}
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	80 83       	st	Z, r24
  a2:	e1 ec       	ldi	r30, 0xC1	; 193
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 61       	ori	r24, 0x18	; 24
  aa:	80 83       	st	Z, r24
  ac:	e2 ec       	ldi	r30, 0xC2	; 194
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 63       	ori	r24, 0x30	; 48
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <USART_Transmit>:
  b8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  bc:	95 ff       	sbrs	r25, 5
  be:	fc cf       	rjmp	.-8      	; 0xb8 <USART_Transmit>
  c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c4:	08 95       	ret

000000c6 <USART_Receive>:
  c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ca:	88 23       	and	r24, r24
  cc:	e4 f7       	brge	.-8      	; 0xc6 <USART_Receive>
  ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d2:	08 95       	ret

000000d4 <soft_UART_send>:

void soft_UART_send(unsigned char data)
{
	PORTB &=~(1<<PB1);
  d4:	95 b1       	in	r25, 0x05	; 5
  d6:	9d 7f       	andi	r25, 0xFD	; 253
  d8:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ee ec       	ldi	r30, 0xCE	; 206
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <soft_UART_send+0xa>
  e2:	00 00       	nop
	
	_delay_us(UBRR_VAL);
	
	uint8_t  val_comp=00000001;
  e4:	91 e0       	ldi	r25, 0x01	; 1

	
	while (val_comp!=0x00)
  e6:	11 c0       	rjmp	.+34     	; 0x10a <soft_UART_send+0x36>
	{
		
		if(data & val_comp)
  e8:	29 2f       	mov	r18, r25
  ea:	28 23       	and	r18, r24
  ec:	29 f0       	breq	.+10     	; 0xf8 <soft_UART_send+0x24>
		{
			PORTB |=(1<<PB1);
  ee:	25 b1       	in	r18, 0x05	; 5
  f0:	22 60       	ori	r18, 0x02	; 2
  f2:	25 b9       	out	0x05, r18	; 5
		     val_comp=(val_comp<<1);
  f4:	99 0f       	add	r25, r25
  f6:	04 c0       	rjmp	.+8      	; 0x100 <soft_UART_send+0x2c>
		}
		else
		{
	        PORTB &=~(1<<PB1);
  f8:	25 b1       	in	r18, 0x05	; 5
  fa:	2d 7f       	andi	r18, 0xFD	; 253
  fc:	25 b9       	out	0x05, r18	; 5
	        val_comp=(val_comp<<1);
  fe:	99 0f       	add	r25, r25
 100:	ee ec       	ldi	r30, 0xCE	; 206
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <soft_UART_send+0x30>
 108:	00 00       	nop
	_delay_us(UBRR_VAL);
	
	uint8_t  val_comp=00000001;

	
	while (val_comp!=0x00)
 10a:	91 11       	cpse	r25, r1
 10c:	ed cf       	rjmp	.-38     	; 0xe8 <soft_UART_send+0x14>
 10e:	8e ec       	ldi	r24, 0xCE	; 206
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <soft_UART_send+0x3e>
 116:	00 00       	nop
 118:	ee ec       	ldi	r30, 0xCE	; 206
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <soft_UART_send+0x48>
 120:	00 00       	nop
		_delay_us(UBRR_VAL);
		
	}
	_delay_us(UBRR_VAL);
	_delay_us(UBRR_VAL);
			PORTB |=(1<<PB1);
 122:	85 b1       	in	r24, 0x05	; 5
 124:	82 60       	ori	r24, 0x02	; 2
 126:	85 b9       	out	0x05, r24	; 5
 128:	08 95       	ret

0000012a <main>:
// ***********************************************************
unsigned int data_available = 0;
// A flag to indicate that data is available in the receive buffer
// Main program
int main(void){
	DDRB=0xFF;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	84 b9       	out	0x04, r24	; 4
	USART_Init((unsigned int)UBRR_VAL);
 12e:	87 e6       	ldi	r24, 0x67	; 103
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
	unsigned char data;
	while(1){
		// Infinite loop; define here the
		data = USART_Receive();
 136:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_Receive>
 13a:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9c e9       	ldi	r25, 0x9C	; 156
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x16>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x1c>
 146:	00 00       	nop
		_delay_ms(20); // 20 ms Delay between rx & tx of data
		USART_Transmit(data);
 148:	8c 2f       	mov	r24, r28
 14a:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Transmit>
		soft_UART_send(data);
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 6a 00 	call	0xd4	; 0xd4 <soft_UART_send>
 154:	f0 cf       	rjmp	.-32     	; 0x136 <main+0xc>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
