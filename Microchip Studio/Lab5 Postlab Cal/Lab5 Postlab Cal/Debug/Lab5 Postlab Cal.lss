
Lab5 Postlab Cal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  0000058a  000005fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000065a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e68  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000790  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000620  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00002344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049b  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000769  00000000  00000000  000028e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  8e:	0c 94 c3 02 	jmp	0x586	; 0x586 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_sendCommand>:
	
	unsigned char temp = num >> 4;
	LCD_sendData(lookup_array[temp]);
	temp = num & 0x0F;	// Mask the upper four bits to zeros
	LCD_sendData(lookup_array[temp]);
}
  96:	95 b1       	in	r25, 0x05	; 5
  98:	9f 7e       	andi	r25, 0xEF	; 239
  9a:	95 b9       	out	0x05, r25	; 5
  9c:	95 b1       	in	r25, 0x05	; 5
  9e:	90 7f       	andi	r25, 0xF0	; 240
  a0:	95 b9       	out	0x05, r25	; 5
  a2:	25 b1       	in	r18, 0x05	; 5
  a4:	98 2f       	mov	r25, r24
  a6:	92 95       	swap	r25
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	92 2b       	or	r25, r18
  ac:	95 b9       	out	0x05, r25	; 5
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	90 62       	ori	r25, 0x20	; 32
  b2:	95 b9       	out	0x05, r25	; 5
  b4:	ef ec       	ldi	r30, 0xCF	; 207
  b6:	f7 e0       	ldi	r31, 0x07	; 7
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_sendCommand+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_sendCommand+0x28>
  be:	00 00       	nop
  c0:	95 b1       	in	r25, 0x05	; 5
  c2:	9f 7d       	andi	r25, 0xDF	; 223
  c4:	95 b9       	out	0x05, r25	; 5
  c6:	ef ec       	ldi	r30, 0xCF	; 207
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_sendCommand+0x34>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_sendCommand+0x3a>
  d0:	00 00       	nop
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	95 b9       	out	0x05, r25	; 5
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	89 2b       	or	r24, r25
  de:	85 b9       	out	0x05, r24	; 5
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	8f ec       	ldi	r24, 0xCF	; 207
  e8:	97 e0       	ldi	r25, 0x07	; 7
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_sendCommand+0x54>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_sendCommand+0x5a>
  f0:	00 00       	nop
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8f 7d       	andi	r24, 0xDF	; 223
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	08 95       	ret

000000fa <LCD_sendData>:
  fa:	95 b1       	in	r25, 0x05	; 5
  fc:	90 61       	ori	r25, 0x10	; 16
  fe:	95 b9       	out	0x05, r25	; 5
 100:	95 b1       	in	r25, 0x05	; 5
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	95 b9       	out	0x05, r25	; 5
 106:	25 b1       	in	r18, 0x05	; 5
 108:	98 2f       	mov	r25, r24
 10a:	92 95       	swap	r25
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	92 2b       	or	r25, r18
 110:	95 b9       	out	0x05, r25	; 5
 112:	95 b1       	in	r25, 0x05	; 5
 114:	90 62       	ori	r25, 0x20	; 32
 116:	95 b9       	out	0x05, r25	; 5
 118:	ef ec       	ldi	r30, 0xCF	; 207
 11a:	f7 e0       	ldi	r31, 0x07	; 7
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_sendData+0x22>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_sendData+0x28>
 122:	00 00       	nop
 124:	95 b1       	in	r25, 0x05	; 5
 126:	9f 7d       	andi	r25, 0xDF	; 223
 128:	95 b9       	out	0x05, r25	; 5
 12a:	ef ec       	ldi	r30, 0xCF	; 207
 12c:	f7 e0       	ldi	r31, 0x07	; 7
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_sendData+0x34>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_sendData+0x3a>
 134:	00 00       	nop
 136:	95 b1       	in	r25, 0x05	; 5
 138:	90 7f       	andi	r25, 0xF0	; 240
 13a:	95 b9       	out	0x05, r25	; 5
 13c:	95 b1       	in	r25, 0x05	; 5
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	89 2b       	or	r24, r25
 142:	85 b9       	out	0x05, r24	; 5
 144:	85 b1       	in	r24, 0x05	; 5
 146:	80 62       	ori	r24, 0x20	; 32
 148:	85 b9       	out	0x05, r24	; 5
 14a:	8f ec       	ldi	r24, 0xCF	; 207
 14c:	97 e0       	ldi	r25, 0x07	; 7
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_sendData+0x54>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_sendData+0x5a>
 154:	00 00       	nop
 156:	85 b1       	in	r24, 0x05	; 5
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	08 95       	ret

0000015e <LCD_initiallize>:
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	84 b9       	out	0x04, r24	; 4
 162:	2f e3       	ldi	r18, 0x3F	; 63
 164:	89 e1       	ldi	r24, 0x19	; 25
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <LCD_initiallize+0xa>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_initiallize+0x14>
 172:	00 00       	nop
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	97 e2       	ldi	r25, 0x27	; 39
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_initiallize+0x20>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_initiallize+0x26>
 184:	00 00       	nop
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 18c:	8f ec       	ldi	r24, 0xCF	; 207
 18e:	97 e0       	ldi	r25, 0x07	; 7
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_initiallize+0x32>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_initiallize+0x38>
 196:	00 00       	nop
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 19e:	8f ec       	ldi	r24, 0xCF	; 207
 1a0:	97 e0       	ldi	r25, 0x07	; 7
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_initiallize+0x44>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_initiallize+0x4a>
 1a8:	00 00       	nop
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 1bc:	08 95       	ret

000001be <LCD_printString>:
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	8c 01       	movw	r16, r24
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <LCD_printString+0x16>
 1ce:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
 1d2:	21 96       	adiw	r28, 0x01	; 1
 1d4:	f8 01       	movw	r30, r16
 1d6:	ec 0f       	add	r30, r28
 1d8:	fd 1f       	adc	r31, r29
 1da:	80 81       	ld	r24, Z
 1dc:	81 11       	cpse	r24, r1
 1de:	f7 cf       	rjmp	.-18     	; 0x1ce <LCD_printString+0x10>
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <LCD_printInteger>:
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <LCD_printInteger+0xe>
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <LCD_printInteger+0x10>
 1fa:	1f 92       	push	r1
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	7c 01       	movw	r14, r24
 202:	99 23       	and	r25, r25
 204:	1c f4       	brge	.+6      	; 0x20c <LCD_printInteger+0x22>
 206:	8d e2       	ldi	r24, 0x2D	; 45
 208:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
 20c:	00 e0       	ldi	r16, 0x00	; 0
 20e:	10 e0       	ldi	r17, 0x00	; 0
 210:	01 c0       	rjmp	.+2      	; 0x214 <LCD_printInteger+0x2a>
 212:	8c 01       	movw	r16, r24
 214:	c7 01       	movw	r24, r14
 216:	99 27       	eor	r25, r25
 218:	ea e0       	ldi	r30, 0x0A	; 10
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	bf 01       	movw	r22, r30
 21e:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodhi4>
 222:	28 2f       	mov	r18, r24
 224:	c7 01       	movw	r24, r14
 226:	bf 01       	movw	r22, r30
 228:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodhi4>
 22c:	7b 01       	movw	r14, r22
 22e:	e1 e0       	ldi	r30, 0x01	; 1
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ec 0f       	add	r30, r28
 234:	fd 1f       	adc	r31, r29
 236:	e0 0f       	add	r30, r16
 238:	f1 1f       	adc	r31, r17
 23a:	20 5d       	subi	r18, 0xD0	; 208
 23c:	20 83       	st	Z, r18
 23e:	c8 01       	movw	r24, r16
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	67 2b       	or	r22, r23
 244:	79 f0       	breq	.+30     	; 0x264 <LCD_printInteger+0x7a>
 246:	85 30       	cpi	r24, 0x05	; 5
 248:	91 05       	cpc	r25, r1
 24a:	19 f7       	brne	.-58     	; 0x212 <LCD_printInteger+0x28>
 24c:	0b c0       	rjmp	.+22     	; 0x264 <LCD_printInteger+0x7a>
 24e:	e1 e0       	ldi	r30, 0x01	; 1
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ec 0f       	add	r30, r28
 254:	fd 1f       	adc	r31, r29
 256:	e0 0f       	add	r30, r16
 258:	f1 1f       	adc	r31, r17
 25a:	80 81       	ld	r24, Z
 25c:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
 260:	01 50       	subi	r16, 0x01	; 1
 262:	11 09       	sbc	r17, r1
 264:	11 23       	and	r17, r17
 266:	9c f7       	brge	.-26     	; 0x24e <LCD_printInteger+0x64>
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	08 95       	ret

00000280 <read_keypad>:
	It returns -1 if none of the keys is pressed, or the 
	index, if the key is pressed.
*/
int8_t read_keypad(void)
{
	PORTD = 0xFF;
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	8b b9       	out	0x0b, r24	; 11
	DDRD = 0xF0;	// Columns are inputs and pulled up. 
 284:	80 ef       	ldi	r24, 0xF0	; 240
 286:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0F;	// Rows are output and 0
 288:	8f e0       	ldi	r24, 0x0F	; 15
 28a:	8b b9       	out	0x0b, r24	; 11
	
	if((~PIND & 0x0F) == 0x00)	// if none of the cols show any key pressed
 28c:	89 b1       	in	r24, 0x09	; 9
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	8f 70       	andi	r24, 0x0F	; 15
 296:	99 27       	eor	r25, r25
 298:	89 2b       	or	r24, r25
 29a:	39 f1       	breq	.+78     	; 0x2ea <read_keypad+0x6a>
		return(-1);
	else
	{
		uint8_t col = (~PIND & 0x0F);
 29c:	99 b1       	in	r25, 0x09	; 9
 29e:	90 95       	com	r25
 2a0:	9f 70       	andi	r25, 0x0F	; 15
		uint8_t col_idx = 0;
 2a2:	40 e0       	ldi	r20, 0x00	; 0
		while(col != 1)	// A potential blocking statement here
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <read_keypad+0x2a>
		{
			col = col>>1;
 2a6:	96 95       	lsr	r25
			col_idx ++;
 2a8:	4f 5f       	subi	r20, 0xFF	; 255
		return(-1);
	else
	{
		uint8_t col = (~PIND & 0x0F);
		uint8_t col_idx = 0;
		while(col != 1)	// A potential blocking statement here
 2aa:	91 30       	cpi	r25, 0x01	; 1
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <read_keypad+0x26>
		{
			col = col>>1;
			col_idx ++;
		}
		PORTD = 0xFF;
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	8b b9       	out	0x0b, r24	; 11
		DDRD = 0x0F;	// Rows are inputs and pulled up. Cols are output and 0
 2b2:	8f e0       	ldi	r24, 0x0F	; 15
 2b4:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0xF0;
 2b6:	80 ef       	ldi	r24, 0xF0	; 240
 2b8:	8b b9       	out	0x0b, r24	; 11
		uint8_t row = ((~PIND & 0xF0) >> 4);
 2ba:	29 b1       	in	r18, 0x09	; 9
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	20 95       	com	r18
 2c0:	30 95       	com	r19
 2c2:	20 7f       	andi	r18, 0xF0	; 240
 2c4:	33 27       	eor	r19, r19
 2c6:	35 95       	asr	r19
 2c8:	27 95       	ror	r18
 2ca:	35 95       	asr	r19
 2cc:	27 95       	ror	r18
 2ce:	35 95       	asr	r19
 2d0:	27 95       	ror	r18
 2d2:	35 95       	asr	r19
 2d4:	27 95       	ror	r18
		uint8_t row_idx = 0;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
		while(row != 1) // A potential blocking statement here
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <read_keypad+0x5e>
		{
			row = row >> 1;
 2da:	26 95       	lsr	r18
			row_idx ++;
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
		PORTD = 0xFF;
		DDRD = 0x0F;	// Rows are inputs and pulled up. Cols are output and 0
		PORTD = 0xF0;
		uint8_t row = ((~PIND & 0xF0) >> 4);
		uint8_t row_idx = 0;
		while(row != 1) // A potential blocking statement here
 2de:	21 30       	cpi	r18, 0x01	; 1
 2e0:	e1 f7       	brne	.-8      	; 0x2da <read_keypad+0x5a>
		{
			row = row >> 1;
			row_idx ++;
		}
		
		uint8_t key_idx = (4 * row_idx) + col_idx;
 2e2:	88 0f       	add	r24, r24
 2e4:	88 0f       	add	r24, r24
 2e6:	84 0f       	add	r24, r20
		return(key_idx);
 2e8:	08 95       	ret
	PORTD = 0xFF;
	DDRD = 0xF0;	// Columns are inputs and pulled up. 
	PORTD = 0x0F;	// Rows are output and 0
	
	if((~PIND & 0x0F) == 0x00)	// if none of the cols show any key pressed
		return(-1);
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
		
		uint8_t key_idx = (4 * row_idx) + col_idx;
		return(key_idx);
	}
	
 2ec:	08 95       	ret

000002ee <main>:
int8_t read_keypad(void);

unsigned char keypad_lookup_proteus[16] = {'7', '8', '9', '/', '4', '5', '6', 'X', '1', '2', '3', '-', 'C', '0', '=', '+'};
int keypad_lookup_int[16] = {7, 8, 9, -1, 4, 5, 6, -1, 1, 2, 3, -1, -1, 0, -1, -1};
int main(void)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	2a 97       	sbiw	r28, 0x0a	; 10
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
    LCD_initiallize();
 302:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_initiallize>
	LCD_printString("LCD Initialized!");
 306:	8a e4       	ldi	r24, 0x4A	; 74
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_printString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	30 e7       	ldi	r19, 0x70	; 112
 312:	42 e0       	ldi	r20, 0x02	; 2
 314:	21 50       	subi	r18, 0x01	; 1
 316:	30 40       	sbci	r19, 0x00	; 0
 318:	40 40       	sbci	r20, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x26>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x30>
 31e:	00 00       	nop
	_delay_ms(100);
	
	LCD_sendCommand(CLEAR_DISPLAY);
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
	LCD_sendCommand(HOME);
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>



	int n[5]= {-1,-1,-1,-1,-1};
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	e0 e4       	ldi	r30, 0x40	; 64
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	de 01       	movw	r26, r28
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	01 90       	ld	r0, Z+
 338:	0d 92       	st	X+, r0
 33a:	8a 95       	dec	r24
 33c:	e1 f7       	brne	.-8      	; 0x336 <main+0x48>
		int i= 1;
 33e:	ee 24       	eor	r14, r14
 340:	e3 94       	inc	r14
 342:	f1 2c       	mov	r15, r1
 344:	41 c0       	rjmp	.+130    	; 0x3c8 <main+0xda>
	while (1) 
    {
		
		while((n[i]==n[i-1]) || (i<=4) || (n[i]== -1))
		{
			int num = read_keypad();
 346:	0e 94 40 01 	call	0x280	; 0x280 <read_keypad>
 34a:	08 2e       	mov	r0, r24
 34c:	00 0c       	add	r0, r0
 34e:	99 0b       	sbc	r25, r25
		    if(num != -1)
 350:	8f 3f       	cpi	r24, 0xFF	; 255
 352:	2f ef       	ldi	r18, 0xFF	; 255
 354:	92 07       	cpc	r25, r18
 356:	59 f0       	breq	.+22     	; 0x36e <main+0x80>
			{
				n[i] = num;
 358:	f7 01       	movw	r30, r14
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	2c 0f       	add	r18, r28
 364:	3d 1f       	adc	r19, r29
 366:	e2 0f       	add	r30, r18
 368:	f3 1f       	adc	r31, r19
 36a:	91 83       	std	Z+1, r25	; 0x01
 36c:	80 83       	st	Z, r24
			}
				
			if((n[i]!=n[i-1]) && (n[i] != -1))
 36e:	f7 01       	movw	r30, r14
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	21 e0       	ldi	r18, 0x01	; 1
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	2c 0f       	add	r18, r28
 37a:	3d 1f       	adc	r19, r29
 37c:	e2 0f       	add	r30, r18
 37e:	f3 1f       	adc	r31, r19
 380:	20 81       	ld	r18, Z
 382:	31 81       	ldd	r19, Z+1	; 0x01
 384:	00 0f       	add	r16, r16
 386:	11 1f       	adc	r17, r17
 388:	e1 e0       	ldi	r30, 0x01	; 1
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	ec 0f       	add	r30, r28
 38e:	fd 1f       	adc	r31, r29
 390:	e0 0f       	add	r30, r16
 392:	f1 1f       	adc	r31, r17
 394:	40 81       	ld	r20, Z
 396:	51 81       	ldd	r21, Z+1	; 0x01
 398:	24 17       	cp	r18, r20
 39a:	35 07       	cpc	r19, r21
 39c:	a9 f0       	breq	.+42     	; 0x3c8 <main+0xda>
 39e:	2f 3f       	cpi	r18, 0xFF	; 255
 3a0:	3f 4f       	sbci	r19, 0xFF	; 255
 3a2:	91 f0       	breq	.+36     	; 0x3c8 <main+0xda>
			{
				LCD_sendData(keypad_lookup_proteus[num]);
 3a4:	fc 01       	movw	r30, r24
 3a6:	e0 5e       	subi	r30, 0xE0	; 224
 3a8:	fe 4f       	sbci	r31, 0xFE	; 254
 3aa:	80 81       	ld	r24, Z
 3ac:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	90 e7       	ldi	r25, 0x70	; 112
 3b4:	22 e0       	ldi	r18, 0x02	; 2
 3b6:	81 50       	subi	r24, 0x01	; 1
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	20 40       	sbci	r18, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0xc8>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0xd2>
 3c0:	00 00       	nop
				_delay_ms(100);
				i++;
 3c2:	3f ef       	ldi	r19, 0xFF	; 255
 3c4:	e3 1a       	sub	r14, r19
 3c6:	f3 0a       	sbc	r15, r19
	int n[5]= {-1,-1,-1,-1,-1};
		int i= 1;
	while (1) 
    {
		
		while((n[i]==n[i-1]) || (i<=4) || (n[i]== -1))
 3c8:	f7 01       	movw	r30, r14
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	8c 0f       	add	r24, r28
 3d4:	9d 1f       	adc	r25, r29
 3d6:	e8 0f       	add	r30, r24
 3d8:	f9 1f       	adc	r31, r25
 3da:	80 81       	ld	r24, Z
 3dc:	91 81       	ldd	r25, Z+1	; 0x01
 3de:	87 01       	movw	r16, r14
 3e0:	01 50       	subi	r16, 0x01	; 1
 3e2:	11 09       	sbc	r17, r1
 3e4:	f8 01       	movw	r30, r16
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	2c 0f       	add	r18, r28
 3f0:	3d 1f       	adc	r19, r29
 3f2:	e2 0f       	add	r30, r18
 3f4:	f3 1f       	adc	r31, r19
 3f6:	20 81       	ld	r18, Z
 3f8:	31 81       	ldd	r19, Z+1	; 0x01
 3fa:	82 17       	cp	r24, r18
 3fc:	93 07       	cpc	r25, r19
 3fe:	09 f4       	brne	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 400:	a2 cf       	rjmp	.-188    	; 0x346 <main+0x58>
 402:	35 e0       	ldi	r19, 0x05	; 5
 404:	e3 16       	cp	r14, r19
 406:	f1 04       	cpc	r15, r1
 408:	0c f4       	brge	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40a:	9d cf       	rjmp	.-198    	; 0x346 <main+0x58>
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	09 f4       	brne	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	9a cf       	rjmp	.-204    	; 0x346 <main+0x58>
			
			//LCD_sendData(keypad_lookup_proteus[num]);
		     //_delay_ms(1000);
		}
	
	    if(n[2]== 15)
 412:	0d 81       	ldd	r16, Y+5	; 0x05
 414:	1e 81       	ldd	r17, Y+6	; 0x06
 416:	0f 30       	cpi	r16, 0x0F	; 15
 418:	11 05       	cpc	r17, r1
 41a:	b1 f4       	brne	.+44     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		{
			n[4] = keypad_lookup_int[n[1]] + keypad_lookup_int[n[3]];
 41c:	eb 81       	ldd	r30, Y+3	; 0x03
 41e:	fc 81       	ldd	r31, Y+4	; 0x04
 420:	ee 0f       	add	r30, r30
 422:	ff 1f       	adc	r31, r31
 424:	e0 50       	subi	r30, 0x00	; 0
 426:	ff 4f       	sbci	r31, 0xFF	; 255
 428:	20 81       	ld	r18, Z
 42a:	31 81       	ldd	r19, Z+1	; 0x01
 42c:	ef 81       	ldd	r30, Y+7	; 0x07
 42e:	f8 85       	ldd	r31, Y+8	; 0x08
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	e0 50       	subi	r30, 0x00	; 0
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	80 81       	ld	r24, Z
 43a:	91 81       	ldd	r25, Z+1	; 0x01
 43c:	82 0f       	add	r24, r18
 43e:	93 1f       	adc	r25, r19
 440:	9a 87       	std	Y+10, r25	; 0x0a
 442:	89 87       	std	Y+9, r24	; 0x09
			LCD_printInteger(n[4]);
 444:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_printInteger>
		}
		if(n[2]== 11)
 448:	0b 30       	cpi	r16, 0x0B	; 11
 44a:	11 05       	cpc	r17, r1
 44c:	b1 f4       	brne	.+44     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
		{
			n[4] = keypad_lookup_int[n[1]] - keypad_lookup_int[n[3]];
 44e:	eb 81       	ldd	r30, Y+3	; 0x03
 450:	fc 81       	ldd	r31, Y+4	; 0x04
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	e0 50       	subi	r30, 0x00	; 0
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	80 81       	ld	r24, Z
 45c:	91 81       	ldd	r25, Z+1	; 0x01
 45e:	ef 81       	ldd	r30, Y+7	; 0x07
 460:	f8 85       	ldd	r31, Y+8	; 0x08
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	e0 50       	subi	r30, 0x00	; 0
 468:	ff 4f       	sbci	r31, 0xFF	; 255
 46a:	20 81       	ld	r18, Z
 46c:	31 81       	ldd	r19, Z+1	; 0x01
 46e:	82 1b       	sub	r24, r18
 470:	93 0b       	sbc	r25, r19
 472:	9a 87       	std	Y+10, r25	; 0x0a
 474:	89 87       	std	Y+9, r24	; 0x09
			LCD_printInteger(n[4]);
 476:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_printInteger>
		}
		if(n[2]== 7)
 47a:	07 30       	cpi	r16, 0x07	; 7
 47c:	11 05       	cpc	r17, r1
 47e:	d9 f4       	brne	.+54     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		{
			n[4] = keypad_lookup_int[n[1]] * keypad_lookup_int[n[3]];
 480:	eb 81       	ldd	r30, Y+3	; 0x03
 482:	fc 81       	ldd	r31, Y+4	; 0x04
 484:	ee 0f       	add	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	e0 50       	subi	r30, 0x00	; 0
 48a:	ff 4f       	sbci	r31, 0xFF	; 255
 48c:	40 81       	ld	r20, Z
 48e:	51 81       	ldd	r21, Z+1	; 0x01
 490:	ef 81       	ldd	r30, Y+7	; 0x07
 492:	f8 85       	ldd	r31, Y+8	; 0x08
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	e0 50       	subi	r30, 0x00	; 0
 49a:	ff 4f       	sbci	r31, 0xFF	; 255
 49c:	20 81       	ld	r18, Z
 49e:	31 81       	ldd	r19, Z+1	; 0x01
 4a0:	42 9f       	mul	r20, r18
 4a2:	c0 01       	movw	r24, r0
 4a4:	43 9f       	mul	r20, r19
 4a6:	90 0d       	add	r25, r0
 4a8:	52 9f       	mul	r21, r18
 4aa:	90 0d       	add	r25, r0
 4ac:	11 24       	eor	r1, r1
 4ae:	9a 87       	std	Y+10, r25	; 0x0a
 4b0:	89 87       	std	Y+9, r24	; 0x09
			LCD_printInteger(n[4]);
 4b2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_printInteger>
		}
		if(n[2]== 3)
 4b6:	03 30       	cpi	r16, 0x03	; 3
 4b8:	11 05       	cpc	r17, r1
 4ba:	b9 f4       	brne	.+46     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
		{
			n[4] = keypad_lookup_int[n[1]] / keypad_lookup_int[n[3]];
 4bc:	eb 81       	ldd	r30, Y+3	; 0x03
 4be:	fc 81       	ldd	r31, Y+4	; 0x04
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	e0 50       	subi	r30, 0x00	; 0
 4c6:	ff 4f       	sbci	r31, 0xFF	; 255
 4c8:	80 81       	ld	r24, Z
 4ca:	91 81       	ldd	r25, Z+1	; 0x01
 4cc:	ef 81       	ldd	r30, Y+7	; 0x07
 4ce:	f8 85       	ldd	r31, Y+8	; 0x08
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	e0 50       	subi	r30, 0x00	; 0
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
 4d8:	60 81       	ld	r22, Z
 4da:	71 81       	ldd	r23, Z+1	; 0x01
 4dc:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodhi4>
 4e0:	cb 01       	movw	r24, r22
 4e2:	7a 87       	std	Y+10, r23	; 0x0a
 4e4:	69 87       	std	Y+9, r22	; 0x09
			LCD_printInteger(n[4]);
 4e6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_printInteger>
		}
		
		n[2]= -2;
 4ea:	8e ef       	ldi	r24, 0xFE	; 254
 4ec:	9f ef       	ldi	r25, 0xFF	; 255
 4ee:	9e 83       	std	Y+6, r25	; 0x06
 4f0:	8d 83       	std	Y+5, r24	; 0x05

		
		//_delay_ms(1000);
		//LCD_sendCommand(CLEAR_DISPLAY);
		if(read_keypad() == 12)
 4f2:	0e 94 40 01 	call	0x280	; 0x280 <read_keypad>
 4f6:	8c 30       	cpi	r24, 0x0C	; 12
 4f8:	09 f0       	breq	.+2      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fa:	66 cf       	rjmp	.-308    	; 0x3c8 <main+0xda>
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	99 e6       	ldi	r25, 0x69	; 105
 500:	28 e1       	ldi	r18, 0x18	; 24
 502:	81 50       	subi	r24, 0x01	; 1
 504:	90 40       	sbci	r25, 0x00	; 0
 506:	20 40       	sbci	r18, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 50c:	00 00       	nop
		{
			_delay_ms(1000);
			LCD_sendCommand(CLEAR_DISPLAY);
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
			LCD_sendCommand(HOME);
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
			i=1;
			n[1]= -1 , n[2]= -1 , n[3]= -1 , n[4]= -1;
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	9f ef       	ldi	r25, 0xFF	; 255
 51e:	9c 83       	std	Y+4, r25	; 0x04
 520:	8b 83       	std	Y+3, r24	; 0x03
 522:	9e 83       	std	Y+6, r25	; 0x06
 524:	8d 83       	std	Y+5, r24	; 0x05
 526:	98 87       	std	Y+8, r25	; 0x08
 528:	8f 83       	std	Y+7, r24	; 0x07
 52a:	9a 87       	std	Y+10, r25	; 0x0a
 52c:	89 87       	std	Y+9, r24	; 0x09
		if(read_keypad() == 12)
		{
			_delay_ms(1000);
			LCD_sendCommand(CLEAR_DISPLAY);
			LCD_sendCommand(HOME);
			i=1;
 52e:	ee 24       	eor	r14, r14
 530:	e3 94       	inc	r14
 532:	f1 2c       	mov	r15, r1
 534:	49 cf       	rjmp	.-366    	; 0x3c8 <main+0xda>

00000536 <__divmodhi4>:
 536:	97 fb       	bst	r25, 7
 538:	07 2e       	mov	r0, r23
 53a:	16 f4       	brtc	.+4      	; 0x540 <__divmodhi4+0xa>
 53c:	00 94       	com	r0
 53e:	07 d0       	rcall	.+14     	; 0x54e <__divmodhi4_neg1>
 540:	77 fd       	sbrc	r23, 7
 542:	09 d0       	rcall	.+18     	; 0x556 <__divmodhi4_neg2>
 544:	0e 94 af 02 	call	0x55e	; 0x55e <__udivmodhi4>
 548:	07 fc       	sbrc	r0, 7
 54a:	05 d0       	rcall	.+10     	; 0x556 <__divmodhi4_neg2>
 54c:	3e f4       	brtc	.+14     	; 0x55c <__divmodhi4_exit>

0000054e <__divmodhi4_neg1>:
 54e:	90 95       	com	r25
 550:	81 95       	neg	r24
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	08 95       	ret

00000556 <__divmodhi4_neg2>:
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255

0000055c <__divmodhi4_exit>:
 55c:	08 95       	ret

0000055e <__udivmodhi4>:
 55e:	aa 1b       	sub	r26, r26
 560:	bb 1b       	sub	r27, r27
 562:	51 e1       	ldi	r21, 0x11	; 17
 564:	07 c0       	rjmp	.+14     	; 0x574 <__udivmodhi4_ep>

00000566 <__udivmodhi4_loop>:
 566:	aa 1f       	adc	r26, r26
 568:	bb 1f       	adc	r27, r27
 56a:	a6 17       	cp	r26, r22
 56c:	b7 07       	cpc	r27, r23
 56e:	10 f0       	brcs	.+4      	; 0x574 <__udivmodhi4_ep>
 570:	a6 1b       	sub	r26, r22
 572:	b7 0b       	sbc	r27, r23

00000574 <__udivmodhi4_ep>:
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	5a 95       	dec	r21
 57a:	a9 f7       	brne	.-22     	; 0x566 <__udivmodhi4_loop>
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	bc 01       	movw	r22, r24
 582:	cd 01       	movw	r24, r26
 584:	08 95       	ret

00000586 <_exit>:
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
