
DinoCodetry.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f3  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fa  00000000  00000000  00000a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e6  00000000  00000000  00001119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001400  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adc_init>:
//}

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  8c:	08 95       	ret

0000008e <adc_read>:
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
  8e:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	98 7f       	andi	r25, 0xF8	; 248
  98:	89 2b       	or	r24, r25
  9a:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  aa:	86 fd       	sbrc	r24, 6
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <adc_read+0x18>
	
	return (ADC);
  ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  b6:	08 95       	ret

000000b8 <main>:
void adc_init();
uint16_t adc_read(uint8_t ch);

int main(void)
{
	DDRB= 0xff;          ///Port B as output
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 b9       	out	0x04, r24	; 4
	adc_init();          ///calling adc initialize
  bc:	0e 94 40 00 	call	0x80	; 0x80 <adc_init>
//	Serial.begin(9600);  /// starting serial monitor to test LDR values on serial monitor of Arduino ide.
	/* 1. Set Fast PWM mode 14: set WGM11, WGM12, WGM13 to 1 */
	/* 3. Set pre-scaler of 64 */
	/* 4. Set Fast PWM non-inverting mode */
	TCCR1A |= (1 << WGM11) | (1 << COM1A1);
  c0:	e0 e8       	ldi	r30, 0x80	; 128
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 68       	ori	r24, 0x82	; 130
  c8:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11) | (1<<CS10);    /// WGM11, WGM12, WGM13 set to 1
  ca:	e1 e8       	ldi	r30, 0x81	; 129
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	8b 61       	ori	r24, 0x1B	; 27
  d2:	80 83       	st	Z, r24

	/* 2. Set ICR1 register: PWM period */
	ICR1 = 4999;             /// for 50 hz clk we require 4999 value. f=fclk/(64(prescaler)*(ICR1+1))
  d4:	87 e8       	ldi	r24, 0x87	; 135
  d6:	93 e1       	ldi	r25, 0x13	; 19
  d8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  dc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	while (1)
	{
		//  OCR1A = 0;
		
		ADC_RawData =  adc_read(0); ///Obstacle 1 /// Read ADC Value at Pin PC0 (A0/ADC0)
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 47 00 	call	0x8e	; 0x8e <adc_read>
  e6:	ec 01       	movw	r28, r24
		ADC_RawData1 = adc_read(1); ///Obstacle 2
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 47 00 	call	0x8e	; 0x8e <adc_read>
		ADC_RawData2 = adc_read(2); ///Background
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 47 00 	call	0x8e	; 0x8e <adc_read>
		
		///CASE 1: when Background is dark and obstacles are light///
		
		//  if(ADC_RawData2  < 460)
		//  {
		if (ADC_RawData <460  )            ///when LDR reads a value less then 460 means a black portion is detected
  f4:	cc 3c       	cpi	r28, 0xCC	; 204
  f6:	d1 40       	sbci	r29, 0x01	; 1
  f8:	78 f4       	brcc	.+30     	; 0x118 <main+0x60>
			//Serial.println("jump");                 ///prints jump on serial monitor
			
			
			//  ADC_RawData =  adc_read(0); ///Obstacle 1
			// Serial.println(ADC_RawData,DEC);
			PORTB |= (1<<PB0);                          ///test led that we used
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	85 b9       	out	0x05, r24	; 5
			OCR1A =295             ;                    ///  106.2 degree movement to press the button according to our requirement.
 100:	87 e2       	ldi	r24, 0x27	; 39
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 108:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8b e8       	ldi	r24, 0x8B	; 139
 10e:	99 eb       	ldi	r25, 0xB9	; 185
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x58>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x5e>
 116:	00 00       	nop
			
			
			
			
		}
		OCR1A = 355      ;; ///120.6 degree movement to release the button acc to our requirement.
 118:	83 e6       	ldi	r24, 0x63	; 99
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 124:	83 ee       	ldi	r24, 0xE3	; 227
 126:	97 e5       	ldi	r25, 0x57	; 87
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x70>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x76>
 12e:	00 00       	nop
 130:	d7 cf       	rjmp	.-82     	; 0xe0 <main+0x28>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
