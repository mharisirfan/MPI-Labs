
LAb5Inlabkeypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6f  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000760  00000000  00000000  00000f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000527  00000000  00000000  00001683  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000466  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043e  00000000  00000000  0000209a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  78:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z6Keypadv>:
}


int8_t Keypad(void)
{
	DDRD = 0x0F; // Setting upper half pins to input
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xF0; // Activating pull resistors for upper half pins
  84:	80 ef       	ldi	r24, 0xF0	; 240
  86:	8b b9       	out	0x0b, r24	; 11
	
	if((PIND & 0b10000000) == 0){ //COL 4
  88:	4f 99       	sbic	0x09, 7	; 9
  8a:	17 c0       	rjmp	.+46     	; 0xba <_Z6Keypadv+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	80 e7       	ldi	r24, 0x70	; 112
  90:	92 e0       	ldi	r25, 0x02	; 2
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <_Z6Keypadv+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_Z6Keypadv+0x1c>
  9c:	00 00       	nop
		_delay_ms(100);
		DDRD = 0xF0;
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0x0F;
  a2:	8f e0       	ldi	r24, 0x0F	; 15
  a4:	8b b9       	out	0x0b, r24	; 11
		if((PIND & 0b00001000) == 0){ //ROW A
  a6:	4b 9b       	sbis	0x09, 3	; 9
  a8:	38 c0       	rjmp	.+112    	; 0x11a <_Z6Keypadv+0x9a>
			return 15;
		}
		else if((PIND & 0b00000100) == 0){ //ROW B
  aa:	4a 9b       	sbis	0x09, 2	; 9
  ac:	38 c0       	rjmp	.+112    	; 0x11e <_Z6Keypadv+0x9e>
			return 14;
		}
		else if((PIND & 0b00000010) == 0){ //ROW C
  ae:	49 9b       	sbis	0x09, 1	; 9
  b0:	38 c0       	rjmp	.+112    	; 0x122 <_Z6Keypadv+0xa2>
			return 13;
		}
		else if((PIND & 0b00000001) == 0){ //COL 4
  b2:	48 99       	sbic	0x09, 0	; 9
  b4:	38 c0       	rjmp	.+112    	; 0x126 <_Z6Keypadv+0xa6>
			return 12;
  b6:	8c e0       	ldi	r24, 0x0C	; 12
  b8:	08 95       	ret
		}
		else return -1;
	}
	else if((PIND & 0b01000000) == 0){ //COL 3
  ba:	4e 99       	sbic	0x09, 6	; 9
  bc:	0e c0       	rjmp	.+28     	; 0xda <_Z6Keypadv+0x5a>
		DDRD = 0xF0;
  be:	80 ef       	ldi	r24, 0xF0	; 240
  c0:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0x0F;
  c2:	8f e0       	ldi	r24, 0x0F	; 15
  c4:	8b b9       	out	0x0b, r24	; 11
		if((PIND & 0b00010000) == 0){ //ROW A
  c6:	4c 9b       	sbis	0x09, 4	; 9
  c8:	30 c0       	rjmp	.+96     	; 0x12a <_Z6Keypadv+0xaa>
			return 11;
		}
		else if((PIND & 0b00100000) == 0){ //ROW B
  ca:	4d 9b       	sbis	0x09, 5	; 9
  cc:	30 c0       	rjmp	.+96     	; 0x12e <_Z6Keypadv+0xae>
			return 10;
		}
		else if((PIND & 0b01000000) == 0){ //ROW C
  ce:	4e 9b       	sbis	0x09, 6	; 9
  d0:	30 c0       	rjmp	.+96     	; 0x132 <_Z6Keypadv+0xb2>
			return 9;
		}
		else if((PIND & 0b10000000) == 0){ //ROW D
  d2:	4f 99       	sbic	0x09, 7	; 9
  d4:	30 c0       	rjmp	.+96     	; 0x136 <_Z6Keypadv+0xb6>
			return 8;
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	08 95       	ret
		}
		else return -1;
	}
	else if((PIND & 0b00100000) == 0){ // COL 2
  da:	4d 99       	sbic	0x09, 5	; 9
  dc:	0e c0       	rjmp	.+28     	; 0xfa <_Z6Keypadv+0x7a>
		DDRD = 0xF0;
  de:	80 ef       	ldi	r24, 0xF0	; 240
  e0:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0x0F;
  e2:	8f e0       	ldi	r24, 0x0F	; 15
  e4:	8b b9       	out	0x0b, r24	; 11
		if((PIND & 0b00010000) == 0){ //ROW A
  e6:	4c 9b       	sbis	0x09, 4	; 9
  e8:	28 c0       	rjmp	.+80     	; 0x13a <_Z6Keypadv+0xba>
			return 7;
		}
		else if((PIND & 0b00100000) == 0){ //ROW B
  ea:	4d 9b       	sbis	0x09, 5	; 9
  ec:	28 c0       	rjmp	.+80     	; 0x13e <_Z6Keypadv+0xbe>
			return 6;
		}
		else if((PIND & 0b01000000) == 0){ //ROW C
  ee:	4e 9b       	sbis	0x09, 6	; 9
  f0:	28 c0       	rjmp	.+80     	; 0x142 <_Z6Keypadv+0xc2>
			return 5;
		}
		else if((PIND & 0b10000000) == 0){ //ROW D
  f2:	4f 99       	sbic	0x09, 7	; 9
  f4:	28 c0       	rjmp	.+80     	; 0x146 <_Z6Keypadv+0xc6>
			return 4;
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	08 95       	ret
		}
		else return -1;
	}
	else if((PIND & 0b00010000) == 0){ // COL 1
  fa:	4c 99       	sbic	0x09, 4	; 9
  fc:	26 c0       	rjmp	.+76     	; 0x14a <_Z6Keypadv+0xca>
		DDRD = 0xF0;
  fe:	80 ef       	ldi	r24, 0xF0	; 240
 100:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0x0F;
 102:	8f e0       	ldi	r24, 0x0F	; 15
 104:	8b b9       	out	0x0b, r24	; 11
		if((PIND & 0b00010000) == 0){ //ROW A
 106:	4c 9b       	sbis	0x09, 4	; 9
 108:	22 c0       	rjmp	.+68     	; 0x14e <_Z6Keypadv+0xce>
			return 3;
		}
		else if((PIND & 0b00100000) == 0){ //ROW B
 10a:	4d 9b       	sbis	0x09, 5	; 9
 10c:	22 c0       	rjmp	.+68     	; 0x152 <_Z6Keypadv+0xd2>
			return 2;
		}
		else if((PIND & 0b01000000) == 0){ //ROW C
 10e:	4e 9b       	sbis	0x09, 6	; 9
 110:	22 c0       	rjmp	.+68     	; 0x156 <_Z6Keypadv+0xd6>
			return 1;
		}
		else if((PIND & 0b10000000) == 0){ //ROW D
 112:	4f 99       	sbic	0x09, 7	; 9
 114:	22 c0       	rjmp	.+68     	; 0x15a <_Z6Keypadv+0xda>
			return 0;
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret
	if((PIND & 0b10000000) == 0){ //COL 4
		_delay_ms(100);
		DDRD = 0xF0;
		PORTD = 0x0F;
		if((PIND & 0b00001000) == 0){ //ROW A
			return 15;
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	08 95       	ret
		}
		else if((PIND & 0b00000100) == 0){ //ROW B
			return 14;
 11e:	8e e0       	ldi	r24, 0x0E	; 14
 120:	08 95       	ret
		}
		else if((PIND & 0b00000010) == 0){ //ROW C
			return 13;
 122:	8d e0       	ldi	r24, 0x0D	; 13
 124:	08 95       	ret
		}
		else if((PIND & 0b00000001) == 0){ //COL 4
			return 12;
		}
		else return -1;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	08 95       	ret
	}
	else if((PIND & 0b01000000) == 0){ //COL 3
		DDRD = 0xF0;
		PORTD = 0x0F;
		if((PIND & 0b00010000) == 0){ //ROW A
			return 11;
 12a:	8b e0       	ldi	r24, 0x0B	; 11
 12c:	08 95       	ret
		}
		else if((PIND & 0b00100000) == 0){ //ROW B
			return 10;
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	08 95       	ret
		}
		else if((PIND & 0b01000000) == 0){ //ROW C
			return 9;
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	08 95       	ret
		}
		else if((PIND & 0b10000000) == 0){ //ROW D
			return 8;
		}
		else return -1;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	08 95       	ret
	}
	else if((PIND & 0b00100000) == 0){ // COL 2
		DDRD = 0xF0;
		PORTD = 0x0F;
		if((PIND & 0b00010000) == 0){ //ROW A
			return 7;
 13a:	87 e0       	ldi	r24, 0x07	; 7
 13c:	08 95       	ret
		}
		else if((PIND & 0b00100000) == 0){ //ROW B
			return 6;
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	08 95       	ret
		}
		else if((PIND & 0b01000000) == 0){ //ROW C
			return 5;
 142:	85 e0       	ldi	r24, 0x05	; 5
 144:	08 95       	ret
		}
		else if((PIND & 0b10000000) == 0){ //ROW D
			return 4;
		}
		else return -1;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	08 95       	ret
			return 0;
		}
		else return -1;
	}
	else
	return -1;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	08 95       	ret
	}
	else if((PIND & 0b00010000) == 0){ // COL 1
		DDRD = 0xF0;
		PORTD = 0x0F;
		if((PIND & 0b00010000) == 0){ //ROW A
			return 3;
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	08 95       	ret
		}
		else if((PIND & 0b00100000) == 0){ //ROW B
			return 2;
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	08 95       	ret
		}
		else if((PIND & 0b01000000) == 0){ //ROW C
			return 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
		}
		else if((PIND & 0b10000000) == 0){ //ROW D
			return 0;
		}
		else return -1;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	return -1;
}
 15c:	08 95       	ret

0000015e <_Z11LCD_Commandh>:

void LCD_Command( unsigned char cmnd )
{
	LCD_Port &= 0x0F ;
 15e:	95 b1       	in	r25, 0x05	; 5
 160:	9f 70       	andi	r25, 0x0F	; 15
 162:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (cmnd & 0xF0); /* sending upper nibble */
 164:	95 b1       	in	r25, 0x05	; 5
 166:	28 2f       	mov	r18, r24
 168:	20 7f       	andi	r18, 0xF0	; 240
 16a:	92 2b       	or	r25, r18
 16c:	95 b9       	out	0x05, r25	; 5
	LCD_Port &= ~ (1<<RS);				/* RS=0, command reg. */
 16e:	95 b1       	in	r25, 0x05	; 5
 170:	9e 7f       	andi	r25, 0xFE	; 254
 172:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<EN);				/* Enable pulse */
 174:	95 b1       	in	r25, 0x05	; 5
 176:	92 60       	ori	r25, 0x02	; 2
 178:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	32 e0       	ldi	r19, 0x02	; 2
 17c:	3a 95       	dec	r19
 17e:	f1 f7       	brne	.-4      	; 0x17c <_Z11LCD_Commandh+0x1e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <_Z11LCD_Commandh+0x24>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 182:	95 b1       	in	r25, 0x05	; 5
 184:	9d 7f       	andi	r25, 0xFD	; 253
 186:	95 b9       	out	0x05, r25	; 5
 188:	ef e8       	ldi	r30, 0x8F	; 143
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <_Z11LCD_Commandh+0x2e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <_Z11LCD_Commandh+0x34>
 192:	00 00       	nop

	_delay_us(200);           /// when left shift the cmmnd is to the right and vice versa.

	LCD_Port &= 0x0F;
 194:	95 b1       	in	r25, 0x05	; 5
 196:	9f 70       	andi	r25, 0x0F	; 15
 198:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (cmnd << 4);  /* sending lower nibble *///1<<pb0               cmnd <<4             4>>>cmnd    cmnd 11110000
 19a:	25 b1       	in	r18, 0x05	; 5
 19c:	f0 e1       	ldi	r31, 0x10	; 16
 19e:	8f 9f       	mul	r24, r31
 1a0:	c0 01       	movw	r24, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	82 2b       	or	r24, r18
 1a6:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	32 e0       	ldi	r19, 0x02	; 2
 1b0:	3a 95       	dec	r19
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <_Z11LCD_Commandh+0x52>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_Z11LCD_Commandh+0x58>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	8d 7f       	andi	r24, 0xFD	; 253
 1ba:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	8f e9       	ldi	r24, 0x9F	; 159
 1be:	9f e0       	ldi	r25, 0x0F	; 15
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <_Z11LCD_Commandh+0x62>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <_Z11LCD_Commandh+0x68>
 1c6:	00 00       	nop
 1c8:	08 95       	ret

000001ca <_Z8LCD_Charh>:
}


void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
 1ca:	95 b1       	in	r25, 0x05	; 5
 1cc:	9f 70       	andi	r25, 0x0F	; 15
 1ce:	28 2f       	mov	r18, r24
 1d0:	20 7f       	andi	r18, 0xF0	; 240
 1d2:	92 2b       	or	r25, r18
 1d4:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<RS);				/* RS=1, data reg. */
 1d6:	95 b1       	in	r25, 0x05	; 5
 1d8:	91 60       	ori	r25, 0x01	; 1
 1da:	95 b9       	out	0x05, r25	; 5
	LCD_Port|= (1<<EN);
 1dc:	95 b1       	in	r25, 0x05	; 5
 1de:	92 60       	ori	r25, 0x02	; 2
 1e0:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	32 e0       	ldi	r19, 0x02	; 2
 1e4:	3a 95       	dec	r19
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <_Z8LCD_Charh+0x1a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <_Z8LCD_Charh+0x20>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1ea:	95 b1       	in	r25, 0x05	; 5
 1ec:	9d 7f       	andi	r25, 0xFD	; 253
 1ee:	95 b9       	out	0x05, r25	; 5
 1f0:	ef e8       	ldi	r30, 0x8F	; 143
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <_Z8LCD_Charh+0x2a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_Z8LCD_Charh+0x30>
 1fa:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
 1fc:	25 b1       	in	r18, 0x05	; 5
 1fe:	f0 e1       	ldi	r31, 0x10	; 16
 200:	8f 9f       	mul	r24, r31
 202:	c0 01       	movw	r24, r0
 204:	11 24       	eor	r1, r1
 206:	92 2f       	mov	r25, r18
 208:	9f 70       	andi	r25, 0x0F	; 15
 20a:	89 2b       	or	r24, r25
 20c:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	82 60       	ori	r24, 0x02	; 2
 212:	85 b9       	out	0x05, r24	; 5
 214:	32 e0       	ldi	r19, 0x02	; 2
 216:	3a 95       	dec	r19
 218:	f1 f7       	brne	.-4      	; 0x216 <_Z8LCD_Charh+0x4c>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <_Z8LCD_Charh+0x52>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	8d 7f       	andi	r24, 0xFD	; 253
 220:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	8f e9       	ldi	r24, 0x9F	; 159
 224:	9f e0       	ldi	r25, 0x0F	; 15
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <_Z8LCD_Charh+0x5c>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <_Z8LCD_Charh+0x62>
 22c:	00 00       	nop
 22e:	08 95       	ret

00000230 <_Z8LCD_Initv>:
	_delay_ms(2);
}

void LCD_Init (void)					/* LCD Initialize function */
{
	LCD_Dir = 0xFF;						/* Make LCD command port direction as o/p */
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	84 b9       	out	0x04, r24	; 4
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	9c e9       	ldi	r25, 0x9C	; 156
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <_Z8LCD_Initv+0x8>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <_Z8LCD_Initv+0xe>
 23e:	00 00       	nop
	_delay_ms(20);						/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x33);
 240:	83 e3       	ldi	r24, 0x33	; 51
 242:	0e 94 af 00 	call	0x15e	; 0x15e <_Z11LCD_Commandh>
	LCD_Command(0x32);		    		/* send for 4 bit initialization of LCD  */
 246:	82 e3       	ldi	r24, 0x32	; 50
 248:	0e 94 af 00 	call	0x15e	; 0x15e <_Z11LCD_Commandh>
	LCD_Command(0x28);              	/* Use 2 line and initialize 5*7 matrix in (4-bit mode)*/
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	0e 94 af 00 	call	0x15e	; 0x15e <_Z11LCD_Commandh>
	LCD_Command(0x0c);              	/* Display on cursor off*/
 252:	8c e0       	ldi	r24, 0x0C	; 12
 254:	0e 94 af 00 	call	0x15e	; 0x15e <_Z11LCD_Commandh>
	LCD_Command(0x06);              	/* Increment cursor (shift cursor to right)*/
 258:	86 e0       	ldi	r24, 0x06	; 6
 25a:	0e 94 af 00 	call	0x15e	; 0x15e <_Z11LCD_Commandh>
	LCD_Command(0x01);              	/* Clear display screen*/
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 af 00 	call	0x15e	; 0x15e <_Z11LCD_Commandh>
 264:	8f e9       	ldi	r24, 0x9F	; 159
 266:	9f e0       	ldi	r25, 0x0F	; 15
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <_Z8LCD_Initv+0x38>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <_Z8LCD_Initv+0x3e>
 26e:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);					/* Cursor 1st row 0th position */
 270:	80 e8       	ldi	r24, 0x80	; 128
 272:	0e 94 af 00 	call	0x15e	; 0x15e <_Z11LCD_Commandh>
 276:	08 95       	ret

00000278 <main>:
void LCD_Command( unsigned char cmnd );
void LCD_Char( unsigned char data );
int8_t Keypad(void);
int main()
{
	DDRD=00000000;
 278:	1a b8       	out	0x0a, r1	; 10
	int8_t dataaa;
	PORTC=0xFF;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	88 b9       	out	0x08, r24	; 8
	{
		
		//pull up
		
		
		LCD_Init();
 27e:	0e 94 18 01 	call	0x230	; 0x230 <_Z8LCD_Initv>
		
	 dataaa=Keypad();
 282:	0e 94 40 00 	call	0x80	; 0x80 <_Z6Keypadv>
	if (dataaa==1)
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	d1 f7       	brne	.-12     	; 0x27e <main+0x6>
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	81 ee       	ldi	r24, 0xE1	; 225
 28e:	94 e0       	ldi	r25, 0x04	; 4
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x18>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x22>
 29a:	00 00       	nop
	{
		_delay_ms(200);
		LCD_Char('D');
 29c:	84 e4       	ldi	r24, 0x44	; 68
 29e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z8LCD_Charh>
 2a2:	ed cf       	rjmp	.-38     	; 0x27e <main+0x6>

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
