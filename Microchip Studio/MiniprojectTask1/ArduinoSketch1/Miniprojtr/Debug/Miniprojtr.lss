
Miniprojtr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001747  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c17  00000000  00000000  00001e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4e  00000000  00000000  00002a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  000035d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082e  00000000  00000000  00003868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d60  00000000  00000000  00004096  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004df6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_16>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  68:	b0 00       	.word	0x00b0	; ????
  6a:	9f 00       	.word	0x009f	; ????
  6c:	b2 00       	.word	0x00b2	; ????
  6e:	a1 00       	.word	0x00a1	; ????
  70:	a3 00       	.word	0x00a3	; ????
  72:	a5 00       	.word	0x00a5	; ????
  74:	a7 00       	.word	0x00a7	; ????
  76:	a9 00       	.word	0x00a9	; ????
  78:	ab 00       	.word	0x00ab	; ????
  7a:	ad 00       	.word	0x00ad	; ????

0000007c <__trampolines_end>:
  7c:	00 00       	nop
  7e:	00 08       	sbc	r0, r0
  80:	00 02       	muls	r16, r16
  82:	01 00       	.word	0x0001	; ????
  84:	00 03       	mulsu	r16, r16
  86:	04 07       	cpc	r16, r20
	...

00000090 <digital_pin_to_bit_mask_PGM>:
  90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_port_PGM>:
  a4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  b4:	03 03 03 03                                         ....

000000b8 <port_to_output_PGM>:
  b8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c2 <port_to_mode_PGM>:
  c2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a9 30       	cpi	r26, 0x09	; 9
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  ec:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <setup>:
const int clockPin = 8; 

 
void setup() {

  pinMode(dataPin, OUTPUT);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <pinMode>
  pinMode(latchPin, OUTPUT);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <pinMode>
  pinMode(clockPin, OUTPUT);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <pinMode>

0000010c <_Z17myfnUpdateDisplayh>:
    myfnUpdateDisplay(bits);    
    delay(50);                 
  }
}

void myfnUpdateDisplay(byte eightBits) {
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
 
  digitalWrite(latchPin, LOW);  // prepare shift register for data
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	0e 94 25 02 	call	0x44a	; 0x44a <digitalWrite>
  shiftOut(dataPin, clockPin, LSBFIRST, eightBits); // send data
 118:	2c 2f       	mov	r18, r28
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	68 e0       	ldi	r22, 0x08	; 8
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	0e 94 54 02 	call	0x4a8	; 0x4a8 <shiftOut>
  digitalWrite(latchPin, HIGH); // update display
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	87 e0       	ldi	r24, 0x07	; 7
}
 128:	cf 91       	pop	r28

void myfnUpdateDisplay(byte eightBits) {
 
  digitalWrite(latchPin, LOW);  // prepare shift register for data
  shiftOut(dataPin, clockPin, LSBFIRST, eightBits); // send data
  digitalWrite(latchPin, HIGH); // update display
 12a:	0c 94 25 02 	jmp	0x44a	; 0x44a <digitalWrite>

0000012e <_Z13myfnNumToBitsi>:
}

byte myfnNumToBits(int someNumber) {
  switch (someNumber) {
 12e:	8a 30       	cpi	r24, 0x0A	; 10
 130:	91 05       	cpc	r25, r1
 132:	a8 f4       	brcc	.+42     	; 0x15e <_Z13myfnNumToBitsi+0x30>
 134:	fc 01       	movw	r30, r24
 136:	ec 5c       	subi	r30, 0xCC	; 204
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__tablejump2__>
    case 0:
      return B00000011;
      break;
    case 1:
      return B10011111;
 13e:	8f e9       	ldi	r24, 0x9F	; 159
 140:	08 95       	ret
      break;
    case 2:
      return B00100101;
      break;
    case 3:
      return B00001101;
 142:	8d e0       	ldi	r24, 0x0D	; 13
 144:	08 95       	ret
      break;
    case 4:
      return B10011001;
 146:	89 e9       	ldi	r24, 0x99	; 153
 148:	08 95       	ret
      break;
    case 5:
      return B01001001;
 14a:	89 e4       	ldi	r24, 0x49	; 73
 14c:	08 95       	ret
      break;
    case 6:
      return B01000001;
 14e:	81 e4       	ldi	r24, 0x41	; 65
 150:	08 95       	ret
      break;
    case 7:
      return B00011111;
 152:	8f e1       	ldi	r24, 0x1F	; 31
 154:	08 95       	ret
      break;
    case 8:
      return B00000001;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
      break;
    case 9:
      return B00001001;
 15a:	89 e0       	ldi	r24, 0x09	; 9
 15c:	08 95       	ret
      break;
    
  }
}
 15e:	08 95       	ret
}

byte myfnNumToBits(int someNumber) {
  switch (someNumber) {
    case 0:
      return B00000011;
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	08 95       	ret
      break;
    case 1:
      return B10011111;
      break;
    case 2:
      return B00100101;
 164:	85 e2       	ldi	r24, 0x25	; 37
    case 9:
      return B00001001;
      break;
    
  }
}
 166:	08 95       	ret

00000168 <loop>:
  pinMode(dataPin, OUTPUT);
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
}

void loop() {
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
  
  for (int i = 0; i < 10; i++) {
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
    byte bits =  myfnNumToBits(i) ;
 170:	ce 01       	movw	r24, r28
 172:	0e 94 97 00 	call	0x12e	; 0x12e <_Z13myfnNumToBitsi>

    myfnUpdateDisplay(bits);    
 176:	0e 94 86 00 	call	0x10c	; 0x10c <_Z17myfnUpdateDisplayh>
    delay(50);                 
 17a:	62 e3       	ldi	r22, 0x32	; 50
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 49 01 	call	0x292	; 0x292 <delay>
  pinMode(clockPin, OUTPUT);
}

void loop() {
  
  for (int i = 0; i < 10; i++) {
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	ca 30       	cpi	r28, 0x0A	; 10
 18a:	d1 05       	cpc	r29, r1
 18c:	89 f7       	brne	.-30     	; 0x170 <loop+0x8>
    byte bits =  myfnNumToBits(i) ;

    myfnUpdateDisplay(bits);    
    delay(50);                 
  }
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <initVariant>:
 194:	08 95       	ret

00000196 <main>:
 196:	0e 94 85 01 	call	0x30a	; 0x30a <init>
 19a:	0e 94 ca 00 	call	0x194	; 0x194 <initVariant>
 19e:	0e 94 7a 00 	call	0xf4	; 0xf4 <setup>
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	0e 94 b4 00 	call	0x168	; 0x168 <loop>
 1aa:	20 97       	sbiw	r28, 0x00	; 0
 1ac:	e1 f3       	breq	.-8      	; 0x1a6 <main+0x10>
 1ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 1b2:	f9 cf       	rjmp	.-14     	; 0x1a6 <main+0x10>

000001b4 <__vector_16>:
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 1ce:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 1d2:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 1d6:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
 1da:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	23 e0       	ldi	r18, 0x03	; 3
 1e0:	23 0f       	add	r18, r19
 1e2:	2d 37       	cpi	r18, 0x7D	; 125
 1e4:	20 f4       	brcc	.+8      	; 0x1ee <__vector_16+0x3a>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	a1 1d       	adc	r26, r1
 1ea:	b1 1d       	adc	r27, r1
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <__vector_16+0x44>
 1ee:	26 e8       	ldi	r18, 0x86	; 134
 1f0:	23 0f       	add	r18, r19
 1f2:	02 96       	adiw	r24, 0x02	; 2
 1f4:	a1 1d       	adc	r26, r1
 1f6:	b1 1d       	adc	r27, r1
 1f8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 200:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 204:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 208:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 20c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 210:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 214:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 218:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	a1 1d       	adc	r26, r1
 220:	b1 1d       	adc	r27, r1
 222:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 226:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 22a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 22e:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <micros>:
 248:	3f b7       	in	r19, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 250:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 254:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 258:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 25c:	26 b5       	in	r18, 0x26	; 38
 25e:	a8 9b       	sbis	0x15, 0	; 21
 260:	05 c0       	rjmp	.+10     	; 0x26c <micros+0x24>
 262:	2f 3f       	cpi	r18, 0xFF	; 255
 264:	19 f0       	breq	.+6      	; 0x26c <micros+0x24>
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	a1 1d       	adc	r26, r1
 26a:	b1 1d       	adc	r27, r1
 26c:	3f bf       	out	0x3f, r19	; 63
 26e:	ba 2f       	mov	r27, r26
 270:	a9 2f       	mov	r26, r25
 272:	98 2f       	mov	r25, r24
 274:	88 27       	eor	r24, r24
 276:	82 0f       	add	r24, r18
 278:	91 1d       	adc	r25, r1
 27a:	a1 1d       	adc	r26, r1
 27c:	b1 1d       	adc	r27, r1
 27e:	bc 01       	movw	r22, r24
 280:	cd 01       	movw	r24, r26
 282:	42 e0       	ldi	r20, 0x02	; 2
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	88 1f       	adc	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	4a 95       	dec	r20
 28e:	d1 f7       	brne	.-12     	; 0x284 <micros+0x3c>
 290:	08 95       	ret

00000292 <delay>:
 292:	8f 92       	push	r8
 294:	9f 92       	push	r9
 296:	af 92       	push	r10
 298:	bf 92       	push	r11
 29a:	cf 92       	push	r12
 29c:	df 92       	push	r13
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	6b 01       	movw	r12, r22
 2a4:	7c 01       	movw	r14, r24
 2a6:	0e 94 24 01 	call	0x248	; 0x248 <micros>
 2aa:	4b 01       	movw	r8, r22
 2ac:	5c 01       	movw	r10, r24
 2ae:	c1 14       	cp	r12, r1
 2b0:	d1 04       	cpc	r13, r1
 2b2:	e1 04       	cpc	r14, r1
 2b4:	f1 04       	cpc	r15, r1
 2b6:	01 f1       	breq	.+64     	; 0x2f8 <delay+0x66>
 2b8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <yield>
 2bc:	0e 94 24 01 	call	0x248	; 0x248 <micros>
 2c0:	dc 01       	movw	r26, r24
 2c2:	cb 01       	movw	r24, r22
 2c4:	88 19       	sub	r24, r8
 2c6:	99 09       	sbc	r25, r9
 2c8:	aa 09       	sbc	r26, r10
 2ca:	bb 09       	sbc	r27, r11
 2cc:	88 3e       	cpi	r24, 0xE8	; 232
 2ce:	93 40       	sbci	r25, 0x03	; 3
 2d0:	a1 05       	cpc	r26, r1
 2d2:	b1 05       	cpc	r27, r1
 2d4:	60 f3       	brcs	.-40     	; 0x2ae <delay+0x1c>
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	c2 1a       	sub	r12, r18
 2da:	d1 08       	sbc	r13, r1
 2dc:	e1 08       	sbc	r14, r1
 2de:	f1 08       	sbc	r15, r1
 2e0:	88 ee       	ldi	r24, 0xE8	; 232
 2e2:	88 0e       	add	r8, r24
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	98 1e       	adc	r9, r24
 2e8:	a1 1c       	adc	r10, r1
 2ea:	b1 1c       	adc	r11, r1
 2ec:	c1 14       	cp	r12, r1
 2ee:	d1 04       	cpc	r13, r1
 2f0:	e1 04       	cpc	r14, r1
 2f2:	f1 04       	cpc	r15, r1
 2f4:	19 f7       	brne	.-58     	; 0x2bc <delay+0x2a>
 2f6:	db cf       	rjmp	.-74     	; 0x2ae <delay+0x1c>
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	df 90       	pop	r13
 2fe:	cf 90       	pop	r12
 300:	bf 90       	pop	r11
 302:	af 90       	pop	r10
 304:	9f 90       	pop	r9
 306:	8f 90       	pop	r8
 308:	08 95       	ret

0000030a <init>:
 30a:	78 94       	sei
 30c:	84 b5       	in	r24, 0x24	; 36
 30e:	82 60       	ori	r24, 0x02	; 2
 310:	84 bd       	out	0x24, r24	; 36
 312:	84 b5       	in	r24, 0x24	; 36
 314:	81 60       	ori	r24, 0x01	; 1
 316:	84 bd       	out	0x24, r24	; 36
 318:	85 b5       	in	r24, 0x25	; 37
 31a:	82 60       	ori	r24, 0x02	; 2
 31c:	85 bd       	out	0x25, r24	; 37
 31e:	85 b5       	in	r24, 0x25	; 37
 320:	81 60       	ori	r24, 0x01	; 1
 322:	85 bd       	out	0x25, r24	; 37
 324:	ee e6       	ldi	r30, 0x6E	; 110
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	80 83       	st	Z, r24
 32e:	e1 e8       	ldi	r30, 0x81	; 129
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	10 82       	st	Z, r1
 334:	80 81       	ld	r24, Z
 336:	82 60       	ori	r24, 0x02	; 2
 338:	80 83       	st	Z, r24
 33a:	80 81       	ld	r24, Z
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	80 83       	st	Z, r24
 340:	e0 e8       	ldi	r30, 0x80	; 128
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	81 60       	ori	r24, 0x01	; 1
 348:	80 83       	st	Z, r24
 34a:	e1 eb       	ldi	r30, 0xB1	; 177
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	84 60       	ori	r24, 0x04	; 4
 352:	80 83       	st	Z, r24
 354:	e0 eb       	ldi	r30, 0xB0	; 176
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	81 60       	ori	r24, 0x01	; 1
 35c:	80 83       	st	Z, r24
 35e:	ea e7       	ldi	r30, 0x7A	; 122
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	84 60       	ori	r24, 0x04	; 4
 366:	80 83       	st	Z, r24
 368:	80 81       	ld	r24, Z
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	80 83       	st	Z, r24
 36e:	80 81       	ld	r24, Z
 370:	81 60       	ori	r24, 0x01	; 1
 372:	80 83       	st	Z, r24
 374:	80 81       	ld	r24, Z
 376:	80 68       	ori	r24, 0x80	; 128
 378:	80 83       	st	Z, r24
 37a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 37e:	08 95       	ret

00000380 <turnOffPWM>:
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	81 f0       	breq	.+32     	; 0x3a4 <turnOffPWM+0x24>
 384:	28 f4       	brcc	.+10     	; 0x390 <turnOffPWM+0x10>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	99 f0       	breq	.+38     	; 0x3b0 <turnOffPWM+0x30>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	a1 f0       	breq	.+40     	; 0x3b6 <turnOffPWM+0x36>
 38e:	08 95       	ret
 390:	87 30       	cpi	r24, 0x07	; 7
 392:	a9 f0       	breq	.+42     	; 0x3be <turnOffPWM+0x3e>
 394:	88 30       	cpi	r24, 0x08	; 8
 396:	b9 f0       	breq	.+46     	; 0x3c6 <turnOffPWM+0x46>
 398:	84 30       	cpi	r24, 0x04	; 4
 39a:	d1 f4       	brne	.+52     	; 0x3d0 <turnOffPWM+0x50>
 39c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 3a0:	8f 7d       	andi	r24, 0xDF	; 223
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <turnOffPWM+0x2a>
 3a4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 3a8:	8f 77       	andi	r24, 0x7F	; 127
 3aa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 3ae:	08 95       	ret
 3b0:	84 b5       	in	r24, 0x24	; 36
 3b2:	8f 77       	andi	r24, 0x7F	; 127
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <turnOffPWM+0x3a>
 3b6:	84 b5       	in	r24, 0x24	; 36
 3b8:	8f 7d       	andi	r24, 0xDF	; 223
 3ba:	84 bd       	out	0x24, r24	; 36
 3bc:	08 95       	ret
 3be:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 3c2:	8f 77       	andi	r24, 0x7F	; 127
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <turnOffPWM+0x4c>
 3c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 3ca:	8f 7d       	andi	r24, 0xDF	; 223
 3cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 3d0:	08 95       	ret

000003d2 <pinMode>:
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	fc 01       	movw	r30, r24
 3da:	e0 57       	subi	r30, 0x70	; 112
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	24 91       	lpm	r18, Z
 3e0:	fc 01       	movw	r30, r24
 3e2:	ec 55       	subi	r30, 0x5C	; 92
 3e4:	ff 4f       	sbci	r31, 0xFF	; 255
 3e6:	84 91       	lpm	r24, Z
 3e8:	88 23       	and	r24, r24
 3ea:	61 f1       	breq	.+88     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	fc 01       	movw	r30, r24
 3f4:	ee 53       	subi	r30, 0x3E	; 62
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	c5 91       	lpm	r28, Z+
 3fa:	d4 91       	lpm	r29, Z
 3fc:	fc 01       	movw	r30, r24
 3fe:	e8 54       	subi	r30, 0x48	; 72
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	a5 91       	lpm	r26, Z+
 404:	b4 91       	lpm	r27, Z
 406:	61 11       	cpse	r22, r1
 408:	09 c0       	rjmp	.+18     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 40a:	9f b7       	in	r25, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	88 81       	ld	r24, Y
 410:	20 95       	com	r18
 412:	82 23       	and	r24, r18
 414:	88 83       	st	Y, r24
 416:	ec 91       	ld	r30, X
 418:	2e 23       	and	r18, r30
 41a:	0b c0       	rjmp	.+22     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 41c:	62 30       	cpi	r22, 0x02	; 2
 41e:	61 f4       	brne	.+24     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 420:	9f b7       	in	r25, 0x3f	; 63
 422:	f8 94       	cli
 424:	88 81       	ld	r24, Y
 426:	32 2f       	mov	r19, r18
 428:	30 95       	com	r19
 42a:	83 23       	and	r24, r19
 42c:	88 83       	st	Y, r24
 42e:	ec 91       	ld	r30, X
 430:	2e 2b       	or	r18, r30
 432:	2c 93       	st	X, r18
 434:	9f bf       	out	0x3f, r25	; 63
 436:	06 c0       	rjmp	.+12     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 438:	8f b7       	in	r24, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	e8 81       	ld	r30, Y
 43e:	2e 2b       	or	r18, r30
 440:	28 83       	st	Y, r18
 442:	8f bf       	out	0x3f, r24	; 63
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <digitalWrite>:
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f9 01       	movw	r30, r18
 456:	e4 58       	subi	r30, 0x84	; 132
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	84 91       	lpm	r24, Z
 45c:	f9 01       	movw	r30, r18
 45e:	e0 57       	subi	r30, 0x70	; 112
 460:	ff 4f       	sbci	r31, 0xFF	; 255
 462:	d4 91       	lpm	r29, Z
 464:	f9 01       	movw	r30, r18
 466:	ec 55       	subi	r30, 0x5C	; 92
 468:	ff 4f       	sbci	r31, 0xFF	; 255
 46a:	c4 91       	lpm	r28, Z
 46c:	cc 23       	and	r28, r28
 46e:	c1 f0       	breq	.+48     	; 0x4a0 <digitalWrite+0x56>
 470:	16 2f       	mov	r17, r22
 472:	81 11       	cpse	r24, r1
 474:	0e 94 c0 01 	call	0x380	; 0x380 <turnOffPWM>
 478:	ec 2f       	mov	r30, r28
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	ee 0f       	add	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	e8 54       	subi	r30, 0x48	; 72
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	a5 91       	lpm	r26, Z+
 486:	b4 91       	lpm	r27, Z
 488:	9f b7       	in	r25, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	11 11       	cpse	r17, r1
 48e:	04 c0       	rjmp	.+8      	; 0x498 <digitalWrite+0x4e>
 490:	8c 91       	ld	r24, X
 492:	d0 95       	com	r29
 494:	d8 23       	and	r29, r24
 496:	02 c0       	rjmp	.+4      	; 0x49c <digitalWrite+0x52>
 498:	ec 91       	ld	r30, X
 49a:	de 2b       	or	r29, r30
 49c:	dc 93       	st	X, r29
 49e:	9f bf       	out	0x3f, r25	; 63
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	08 95       	ret

000004a8 <shiftOut>:
 4a8:	ff 92       	push	r15
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	08 2f       	mov	r16, r24
 4b4:	16 2f       	mov	r17, r22
 4b6:	f4 2e       	mov	r15, r20
 4b8:	c2 2f       	mov	r28, r18
 4ba:	d8 e0       	ldi	r29, 0x08	; 8
 4bc:	6c 2f       	mov	r22, r28
 4be:	f1 10       	cpse	r15, r1
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <shiftOut+0x26>
 4c2:	61 70       	andi	r22, 0x01	; 1
 4c4:	80 2f       	mov	r24, r16
 4c6:	0e 94 25 02 	call	0x44a	; 0x44a <digitalWrite>
 4ca:	c6 95       	lsr	r28
 4cc:	07 c0       	rjmp	.+14     	; 0x4dc <shiftOut+0x34>
 4ce:	66 1f       	adc	r22, r22
 4d0:	66 27       	eor	r22, r22
 4d2:	66 1f       	adc	r22, r22
 4d4:	80 2f       	mov	r24, r16
 4d6:	0e 94 25 02 	call	0x44a	; 0x44a <digitalWrite>
 4da:	cc 0f       	add	r28, r28
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	81 2f       	mov	r24, r17
 4e0:	0e 94 25 02 	call	0x44a	; 0x44a <digitalWrite>
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	81 2f       	mov	r24, r17
 4e8:	0e 94 25 02 	call	0x44a	; 0x44a <digitalWrite>
 4ec:	d1 50       	subi	r29, 0x01	; 1
 4ee:	31 f7       	brne	.-52     	; 0x4bc <shiftOut+0x14>
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	ff 90       	pop	r15
 4fa:	08 95       	ret

000004fc <yield>:
 4fc:	08 95       	ret

000004fe <__tablejump2__>:
 4fe:	ee 0f       	add	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	05 90       	lpm	r0, Z+
 504:	f4 91       	lpm	r31, Z
 506:	e0 2d       	mov	r30, r0
 508:	09 94       	ijmp

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
