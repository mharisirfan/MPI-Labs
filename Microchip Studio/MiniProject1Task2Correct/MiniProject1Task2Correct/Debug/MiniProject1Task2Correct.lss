
MiniProject1Task2Correct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003af  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  00001693  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD=0b00000011; // using PD0 and PD1 as input on decoder (A and B)
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB=0b11111111; // using complete PORTB as OUTPUT.
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 b9       	out	0x04, r24	; 4
	
    while (1) 
    {
	    PORTD=0x00;                         //setting selection line to 00
  88:	1b b8       	out	0x0b, r1	; 11
    	PORTB=0b11000000;                 // 0  to be displayed on first 7 segment            
  8a:	80 ec       	ldi	r24, 0xC0	; 192
  8c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	8f e0       	ldi	r24, 0x0F	; 15
  90:	97 e2       	ldi	r25, 0x27	; 39
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x12>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x18>
  98:	00 00       	nop
		_delay_ms(5);         
	    
		PORTD=0x01;                            //setting selection line to 01
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	8b b9       	out	0x0b, r24	; 11
		PORTB=0b11111001;                 //1   to be displayed on second 7 segment
  9e:	89 ef       	ldi	r24, 0xF9	; 249
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	8f e0       	ldi	r24, 0x0F	; 15
  a4:	97 e2       	ldi	r25, 0x27	; 39
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x26>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop
       _delay_ms(5);
	 
	 
	   PORTD=0x02;                               //setting selection line to 02
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8b b9       	out	0x0b, r24	; 11
	   PORTB=0b10100100;                   //2   to be displayed on second 7 segment
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	97 e2       	ldi	r25, 0x27	; 39
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x3a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
       _delay_ms(5);	


        PORTD=0x03;                                  //setting selection line to 03
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	8b b9       	out	0x0b, r24	; 11
    	PORTB=0b10110000;                   //3      to be displayed on second 7 segment
  c6:	80 eb       	ldi	r24, 0xB0	; 176
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	97 e2       	ldi	r25, 0x27	; 39
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x4e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x54>
  d4:	00 00       	nop
  d6:	d8 cf       	rjmp	.-80     	; 0x88 <main+0x8>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
