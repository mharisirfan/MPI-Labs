
Lab 4 Inlab task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc4  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000771  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043f  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040e  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000459  00000000  00000000  00001ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000232f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  78:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <LCD_Command>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
  80:	95 b1       	in	r25, 0x05	; 5
  82:	9f 70       	andi	r25, 0x0F	; 15
  84:	28 2f       	mov	r18, r24
  86:	20 7f       	andi	r18, 0xF0	; 240
  88:	92 2b       	or	r25, r18
  8a:	95 b9       	out	0x05, r25	; 5
  8c:	95 b1       	in	r25, 0x05	; 5
  8e:	9e 7f       	andi	r25, 0xFE	; 254
  90:	95 b9       	out	0x05, r25	; 5
  92:	95 b1       	in	r25, 0x05	; 5
  94:	92 60       	ori	r25, 0x02	; 2
  96:	95 b9       	out	0x05, r25	; 5
  98:	00 00       	nop
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	9d 7f       	andi	r25, 0xFD	; 253
  9e:	95 b9       	out	0x05, r25	; 5
  a0:	32 e4       	ldi	r19, 0x42	; 66
  a2:	3a 95       	dec	r19
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Command+0x22>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_Command+0x28>
  a8:	25 b1       	in	r18, 0x05	; 5
  aa:	30 e1       	ldi	r19, 0x10	; 16
  ac:	83 9f       	mul	r24, r19
  ae:	c0 01       	movw	r24, r0
  b0:	11 24       	eor	r1, r1
  b2:	92 2f       	mov	r25, r18
  b4:	9f 70       	andi	r25, 0x0F	; 15
  b6:	89 2b       	or	r24, r25
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	85 b9       	out	0x05, r24	; 5
  c0:	00 00       	nop
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8d 7f       	andi	r24, 0xFD	; 253
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	83 ef       	ldi	r24, 0xF3	; 243
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Command+0x4c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_Command+0x52>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <LCD_Char>:
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	9f 70       	andi	r25, 0x0F	; 15
  da:	28 2f       	mov	r18, r24
  dc:	20 7f       	andi	r18, 0xF0	; 240
  de:	92 2b       	or	r25, r18
  e0:	95 b9       	out	0x05, r25	; 5
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	91 60       	ori	r25, 0x01	; 1
  e6:	95 b9       	out	0x05, r25	; 5
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	92 60       	ori	r25, 0x02	; 2
  ec:	95 b9       	out	0x05, r25	; 5
  ee:	00 00       	nop
  f0:	95 b1       	in	r25, 0x05	; 5
  f2:	9d 7f       	andi	r25, 0xFD	; 253
  f4:	95 b9       	out	0x05, r25	; 5
  f6:	32 e4       	ldi	r19, 0x42	; 66
  f8:	3a 95       	dec	r19
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_Char+0x22>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_Char+0x28>
  fe:	25 b1       	in	r18, 0x05	; 5
 100:	30 e1       	ldi	r19, 0x10	; 16
 102:	83 9f       	mul	r24, r19
 104:	c0 01       	movw	r24, r0
 106:	11 24       	eor	r1, r1
 108:	92 2f       	mov	r25, r18
 10a:	9f 70       	andi	r25, 0x0F	; 15
 10c:	89 2b       	or	r24, r25
 10e:	85 b9       	out	0x05, r24	; 5
 110:	85 b1       	in	r24, 0x05	; 5
 112:	82 60       	ori	r24, 0x02	; 2
 114:	85 b9       	out	0x05, r24	; 5
 116:	00 00       	nop
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	8d 7f       	andi	r24, 0xFD	; 253
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	83 ef       	ldi	r24, 0xF3	; 243
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Char+0x4c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Char+0x52>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <LCD_Init>:
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	84 b9       	out	0x04, r24	; 4
 130:	87 e8       	ldi	r24, 0x87	; 135
 132:	93 e1       	ldi	r25, 0x13	; 19
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Init+0x8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_Init+0xe>
 13a:	00 00       	nop
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
 142:	88 e2       	ldi	r24, 0x28	; 40
 144:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
 148:	8c e0       	ldi	r24, 0x0C	; 12
 14a:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
 15a:	83 ef       	ldi	r24, 0xF3	; 243
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_Init+0x32>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_Init+0x38>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <main>:
}

int main()
{

	UCSR0B &= ~((1<<3)|(1<<4));
 168:	e1 ec       	ldi	r30, 0xC1	; 193
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	87 7e       	andi	r24, 0xE7	; 231
 170:	80 83       	st	Z, r24
	LCD_Init();            /* Initialization of LCD*/
 172:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_Init>
	DDRD = 0x00;
 176:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xff;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	8b b9       	out	0x0b, r24	; 11
	DDRC= 0x00;
 17c:	17 b8       	out	0x07, r1	; 7

	while(1)
	{

		unsigned char data;
		data = PIND;
 17e:	89 b1       	in	r24, 0x09	; 9

		LCD_Char(data);
 180:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_Char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f e7       	ldi	r18, 0x7F	; 127
 186:	8a e1       	ldi	r24, 0x1A	; 26
 188:	96 e0       	ldi	r25, 0x06	; 6
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x22>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x2c>
 194:	00 00       	nop
 196:	f3 cf       	rjmp	.-26     	; 0x17e <main+0x16>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
