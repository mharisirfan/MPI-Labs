
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000768  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a8  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c3  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fa  00000000  00000000  00001709  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001803  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

#define F_CPU 16000000UL 
#include <avr/io.h>
#include <util/delay.h>
int main()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b00000111;
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	84 b9       	out	0x04, r24	; 4
	unsigned char lookUpTable[10]={
  ae:	8a e0       	ldi	r24, 0x0A	; 10
  b0:	e0 e0       	ldi	r30, 0x00	; 0
  b2:	f1 e0       	ldi	r31, 0x01	; 1
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x22>
		/* fill out the 10 hex codes for the 10 digits*/
        0xC0,0xF9,0xA4,0xB0,0x99,
        0x92,0x82,0xF8,0x80,0x90
    };
	unsigned char counter = 0;
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <main+0x30>
		PORTB&=~(1<<PB2); // To parallel push data from register to output pins
		_delay_ms(2000);
		
		counter++;
		if(counter == 10)
			counter = 0;
  c4:	90 e0       	ldi	r25, 0x00	; 0
        0xC0,0xF9,0xA4,0xB0,0x99,
        0x92,0x82,0xF8,0x80,0x90
    };
	unsigned char counter = 0;
	while(1){	// Infinite loop; define here the
		int serial = lookUpTable[counter];
  c6:	e1 e0       	ldi	r30, 0x01	; 1
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ec 0f       	add	r30, r28
  cc:	fd 1f       	adc	r31, r29
  ce:	e9 0f       	add	r30, r25
  d0:	f1 1d       	adc	r31, r1
  d2:	20 81       	ld	r18, Z
  d4:	30 e0       	ldi	r19, 0x00	; 0
		
		for(int i=0;i<8;i++){
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	13 c0       	rjmp	.+38     	; 0x102 <main+0x6c>
			if(serial & 0b10000000)
  dc:	27 ff       	sbrs	r18, 7
  de:	04 c0       	rjmp	.+8      	; 0xe8 <main+0x52>
				PORTB |= (1<<PB0);
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	03 c0       	rjmp	.+6      	; 0xee <main+0x58>
			else
				PORTB &=~ (1<<PB0);
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1<<PB1); // Giving pulse to SHIFT CLOCK SH_CP
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	85 b9       	out	0x05, r24	; 5
			PORTB &=~ (1<<PB1); // To store from DS to LSB of register
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	8d 7f       	andi	r24, 0xFD	; 253
  f8:	85 b9       	out	0x05, r24	; 5
			serial=serial<<1;
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
    };
	unsigned char counter = 0;
	while(1){	// Infinite loop; define here the
		int serial = lookUpTable[counter];
		
		for(int i=0;i<8;i++){
  fe:	4f 5f       	subi	r20, 0xFF	; 255
 100:	5f 4f       	sbci	r21, 0xFF	; 255
 102:	48 30       	cpi	r20, 0x08	; 8
 104:	51 05       	cpc	r21, r1
 106:	54 f3       	brlt	.-44     	; 0xdc <main+0x46>
				PORTB &=~ (1<<PB0);
			PORTB |= (1<<PB1); // Giving pulse to SHIFT CLOCK SH_CP
			PORTB &=~ (1<<PB1); // To store from DS to LSB of register
			serial=serial<<1;
		}
		PORTB|=(1<<PB2); // Giving pulse to STORE CLOCK ST_CP 
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	85 b9       	out	0x05, r24	; 5
		PORTB&=~(1<<PB2); // To parallel push data from register to output pins
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8b 7f       	andi	r24, 0xFB	; 251
 112:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	37 ea       	ldi	r19, 0xA7	; 167
 118:	81 e6       	ldi	r24, 0x61	; 97
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	30 40       	sbci	r19, 0x00	; 0
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x84>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x8e>
 124:	00 00       	nop
		_delay_ms(2000);
		
		counter++;
 126:	9f 5f       	subi	r25, 0xFF	; 255
		if(counter == 10)
 128:	9a 30       	cpi	r25, 0x0A	; 10
 12a:	69 f6       	brne	.-102    	; 0xc6 <main+0x30>
 12c:	cb cf       	rjmp	.-106    	; 0xc4 <main+0x2e>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
