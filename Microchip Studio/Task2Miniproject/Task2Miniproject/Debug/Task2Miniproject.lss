
Task2Miniproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000146  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000758  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069a  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  0000107e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cc  00000000  00000000  0000175b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001827  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

#include <avr/io.h>
#define F_CPU 1000000UL 
#include<util/delay.h>
int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	c0 54       	subi	r28, 0x40	; 64
  a0:	d1 09       	sbc	r29, r1
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
	
	DDRB=00000001;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	84 b9       	out	0x04, r24	; 4
	DDRD=10010000;
  b0:	80 e9       	ldi	r24, 0x90	; 144
  b2:	8a b9       	out	0x0a, r24	; 10

	int lookUpTable[32]=
	{0,0,0,0,0,0,1,1 , 0,1,0,0,0,0,0,1 ,0,0,1,0,0,1,0,1, 0,0,0,0,1,1,0,1 };//0 1 2 3
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	e0 e0       	ldi	r30, 0x00	; 0
  b8:	f1 e0       	ldi	r31, 0x01	; 1
  ba:	de 01       	movw	r26, r28
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	01 90       	ld	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	8a 95       	dec	r24
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x28>
    {
		//PD7 latch
		//PB0 clock
		
		
		for (int i = 0; i <1; i++) 
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	14 16       	cp	r1, r20
  cc:	15 06       	cpc	r1, r21
  ce:	dc f3       	brlt	.-10     	; 0xc6 <main+0x30>
  d0:	8f e1       	ldi	r24, 0x1F	; 31
  d2:	90 e0       	ldi	r25, 0x00	; 0
              
		{
			for(int j=31; j>=0 ;j--)
  d4:	99 23       	and	r25, r25
  d6:	7c f1       	brlt	.+94     	; 0x136 <main+0xa0>
			{
				//_delay_ms(40);         //2 secs
				PORTD &= ~(1<<PD7);                        //latch low
  d8:	2b b1       	in	r18, 0x0b	; 11
  da:	2f 77       	andi	r18, 0x7F	; 127
  dc:	2b b9       	out	0x0b, r18	; 11
				
				
				if(lookUpTable[j]==0)
  de:	fc 01       	movw	r30, r24
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	2c 0f       	add	r18, r28
  ea:	3d 1f       	adc	r19, r29
  ec:	e2 0f       	add	r30, r18
  ee:	f3 1f       	adc	r31, r19
  f0:	20 81       	ld	r18, Z
  f2:	31 81       	ldd	r19, Z+1	; 0x01
  f4:	21 15       	cp	r18, r1
  f6:	31 05       	cpc	r19, r1
  f8:	39 f4       	brne	.+14     	; 0x108 <main+0x72>
				{
					
					PORTB &= ~(1<<PB0);                       // clock low
  fa:	25 b1       	in	r18, 0x05	; 5
  fc:	2e 7f       	andi	r18, 0xFE	; 254
  fe:	25 b9       	out	0x05, r18	; 5
					
					PORTD &= ~(1<<PD4);                      //pin4 low (anode high)
 100:	2b b1       	in	r18, 0x0b	; 11
 102:	2f 7e       	andi	r18, 0xEF	; 239
 104:	2b b9       	out	0x0b, r18	; 11
 106:	09 c0       	rjmp	.+18     	; 0x11a <main+0x84>
				}
				else if(lookUpTable[j]==1)
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	31 05       	cpc	r19, r1
 10c:	31 f4       	brne	.+12     	; 0x11a <main+0x84>
				{
					
					PORTB &= ~(1<<PB0);                     //clock low
 10e:	25 b1       	in	r18, 0x05	; 5
 110:	2e 7f       	andi	r18, 0xFE	; 254
 112:	25 b9       	out	0x05, r18	; 5
					PORTD |= (1<<PD4);                      // pin4 high(anodelow)
 114:	2b b1       	in	r18, 0x0b	; 11
 116:	20 61       	ori	r18, 0x10	; 16
 118:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	3f e3       	ldi	r19, 0x3F	; 63
 11c:	6d e0       	ldi	r22, 0x0D	; 13
 11e:	23 e0       	ldi	r18, 0x03	; 3
 120:	31 50       	subi	r19, 0x01	; 1
 122:	60 40       	sbci	r22, 0x00	; 0
 124:	20 40       	sbci	r18, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x8a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x94>
 12a:	00 00       	nop
					
					
				}
				_delay_ms(1000);
					PORTB |= (1<<PB0);                           //clock high
 12c:	25 b1       	in	r18, 0x05	; 5
 12e:	21 60       	ori	r18, 0x01	; 1
 130:	25 b9       	out	0x05, r18	; 5
		
		
		for (int i = 0; i <1; i++) 
              
		{
			for(int j=31; j>=0 ;j--)
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	cf cf       	rjmp	.-98     	; 0xd4 <main+0x3e>
				_delay_ms(1000);
					PORTB |= (1<<PB0);                           //clock high
		 	
			}
			
			PORTD|= (1<<PD7);                                  // latch high
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	8b b9       	out	0x0b, r24	; 11
    {
		//PD7 latch
		//PB0 clock
		
		
		for (int i = 0; i <1; i++) 
 13c:	4f 5f       	subi	r20, 0xFF	; 255
 13e:	5f 4f       	sbci	r21, 0xFF	; 255
 140:	c4 cf       	rjmp	.-120    	; 0xca <main+0x34>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
