
Lab4Postlab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac3  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000740  00000000  00000000  00000d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cb  00000000  00000000  000014bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ae  00000000  00000000  00001d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000020f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z11LCD_Commandh>:



void LCD_Command( unsigned char cmnd )
{
	LCD_Port &= 0x0F ;
  80:	95 b1       	in	r25, 0x05	; 5
  82:	9f 70       	andi	r25, 0x0F	; 15
  84:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (cmnd & 0xF0); /* sending upper nibble */
  86:	95 b1       	in	r25, 0x05	; 5
  88:	28 2f       	mov	r18, r24
  8a:	20 7f       	andi	r18, 0xF0	; 240
  8c:	92 2b       	or	r25, r18
  8e:	95 b9       	out	0x05, r25	; 5
	LCD_Port &= ~ (1<<RS);				/* RS=0, command reg. */
  90:	95 b1       	in	r25, 0x05	; 5
  92:	9e 7f       	andi	r25, 0xFE	; 254
  94:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<EN);				/* Enable pulse */
  96:	95 b1       	in	r25, 0x05	; 5
  98:	92 60       	ori	r25, 0x02	; 2
  9a:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	32 e0       	ldi	r19, 0x02	; 2
  9e:	3a 95       	dec	r19
  a0:	f1 f7       	brne	.-4      	; 0x9e <_Z11LCD_Commandh+0x1e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_Z11LCD_Commandh+0x24>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	9d 7f       	andi	r25, 0xFD	; 253
  a8:	95 b9       	out	0x05, r25	; 5
  aa:	ef e8       	ldi	r30, 0x8F	; 143
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <_Z11LCD_Commandh+0x2e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_Z11LCD_Commandh+0x34>
  b4:	00 00       	nop

	_delay_us(200);           /// when left shift the cmmnd is to the right and vice versa.

	LCD_Port &= 0x0F;
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (cmnd << 4);  /* sending lower nibble *///1<<pb0               cmnd <<4             4>>>cmnd    cmnd 11110000
  bc:	25 b1       	in	r18, 0x05	; 5
  be:	f0 e1       	ldi	r31, 0x10	; 16
  c0:	8f 9f       	mul	r24, r31
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	82 2b       	or	r24, r18
  c8:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	32 e0       	ldi	r19, 0x02	; 2
  d2:	3a 95       	dec	r19
  d4:	f1 f7       	brne	.-4      	; 0xd2 <_Z11LCD_Commandh+0x52>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <_Z11LCD_Commandh+0x58>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <_Z11LCD_Commandh+0x62>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_Z11LCD_Commandh+0x68>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <_Z8LCD_Charh>:
}


void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	9f 70       	andi	r25, 0x0F	; 15
  f0:	28 2f       	mov	r18, r24
  f2:	20 7f       	andi	r18, 0xF0	; 240
  f4:	92 2b       	or	r25, r18
  f6:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<RS);				/* RS=1, data reg. */
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	91 60       	ori	r25, 0x01	; 1
  fc:	95 b9       	out	0x05, r25	; 5
	LCD_Port|= (1<<EN);
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	92 60       	ori	r25, 0x02	; 2
 102:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	32 e0       	ldi	r19, 0x02	; 2
 106:	3a 95       	dec	r19
 108:	f1 f7       	brne	.-4      	; 0x106 <_Z8LCD_Charh+0x1a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_Z8LCD_Charh+0x20>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 10c:	95 b1       	in	r25, 0x05	; 5
 10e:	9d 7f       	andi	r25, 0xFD	; 253
 110:	95 b9       	out	0x05, r25	; 5
 112:	ef e8       	ldi	r30, 0x8F	; 143
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <_Z8LCD_Charh+0x2a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_Z8LCD_Charh+0x30>
 11c:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
 11e:	25 b1       	in	r18, 0x05	; 5
 120:	f0 e1       	ldi	r31, 0x10	; 16
 122:	8f 9f       	mul	r24, r31
 124:	c0 01       	movw	r24, r0
 126:	11 24       	eor	r1, r1
 128:	92 2f       	mov	r25, r18
 12a:	9f 70       	andi	r25, 0x0F	; 15
 12c:	89 2b       	or	r24, r25
 12e:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 130:	85 b1       	in	r24, 0x05	; 5
 132:	82 60       	ori	r24, 0x02	; 2
 134:	85 b9       	out	0x05, r24	; 5
 136:	32 e0       	ldi	r19, 0x02	; 2
 138:	3a 95       	dec	r19
 13a:	f1 f7       	brne	.-4      	; 0x138 <_Z8LCD_Charh+0x4c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <_Z8LCD_Charh+0x52>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f e9       	ldi	r24, 0x9F	; 159
 146:	9f e0       	ldi	r25, 0x0F	; 15
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <_Z8LCD_Charh+0x5c>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_Z8LCD_Charh+0x62>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <_Z8LCD_Initv>:
	_delay_ms(2);
}

void LCD_Init (void)					/* LCD Initialize function */
{
	LCD_Dir = 0xFF;						/* Make LCD command port direction as o/p */
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	84 b9       	out	0x04, r24	; 4
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9c e9       	ldi	r25, 0x9C	; 156
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <_Z8LCD_Initv+0x8>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_Z8LCD_Initv+0xe>
 160:	00 00       	nop
	_delay_ms(20);						/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x33);
 162:	83 e3       	ldi	r24, 0x33	; 51
 164:	0e 94 40 00 	call	0x80	; 0x80 <_Z11LCD_Commandh>
	LCD_Command(0x32);		    		/* send for 4 bit initialization of LCD  */
 168:	82 e3       	ldi	r24, 0x32	; 50
 16a:	0e 94 40 00 	call	0x80	; 0x80 <_Z11LCD_Commandh>
	LCD_Command(0x28);              	/* Use 2 line and initialize 5*7 matrix in (4-bit mode)*/
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	0e 94 40 00 	call	0x80	; 0x80 <_Z11LCD_Commandh>
	LCD_Command(0x0c);              	/* Display on cursor off*/
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	0e 94 40 00 	call	0x80	; 0x80 <_Z11LCD_Commandh>
	LCD_Command(0x06);              	/* Increment cursor (shift cursor to right)*/
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	0e 94 40 00 	call	0x80	; 0x80 <_Z11LCD_Commandh>
	LCD_Command(0x01);              	/* Clear display screen*/
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 40 00 	call	0x80	; 0x80 <_Z11LCD_Commandh>
 186:	8f e9       	ldi	r24, 0x9F	; 159
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <_Z8LCD_Initv+0x38>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <_Z8LCD_Initv+0x3e>
 190:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);					/* Cursor 1st row 0th position */
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	0e 94 40 00 	call	0x80	; 0x80 <_Z11LCD_Commandh>
 198:	08 95       	ret

0000019a <main>:
void LCD_Command( unsigned char cmnd );
void LCD_Char( unsigned char data );

int main()
{
	DDRD=0xFF;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	8a b9       	out	0x0a, r24	; 10
		unsigned char dataaa;
		PORTC=0xFF;
 19e:	88 b9       	out	0x08, r24	; 8
	{
	
		 //pull up
		
		
			LCD_Init();
 1a0:	0e 94 a9 00 	call	0x152	; 0x152 <_Z8LCD_Initv>
			dataaa=PIND;
 1a4:	89 b1       	in	r24, 0x09	; 9
			LCD_Char(dataaa);
 1a6:	0e 94 76 00 	call	0xec	; 0xec <_Z8LCD_Charh>
	//LCD_Char('a');
	//LCD_String("Haris ");		/* Write string on 1st line of LCD*/
	//	LCD_Command(0xc0);					/* Go to 2nd line*/
	//LCD_String("Irfan");			/* Write string on 2nd line*/
	
}
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
