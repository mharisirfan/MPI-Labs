
Lab4Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae8  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000741  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fd  00000000  00000000  00001519  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001918  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ce  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f3  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002151  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  78:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <LCD_Command>:



void LCD_Command( unsigned char cmnd )
{
	LCD_Port &= 0x0F ;
  80:	9b b1       	in	r25, 0x0b	; 11
  82:	9f 70       	andi	r25, 0x0F	; 15
  84:	9b b9       	out	0x0b, r25	; 11
	LCD_Port |= (cmnd & 0xF0); /* sending upper nibble */
  86:	9b b1       	in	r25, 0x0b	; 11
  88:	28 2f       	mov	r18, r24
  8a:	20 7f       	andi	r18, 0xF0	; 240
  8c:	92 2b       	or	r25, r18
  8e:	9b b9       	out	0x0b, r25	; 11
	LCD_Port &= ~ (1<<RS);				/* RS=0, command reg. */
  90:	9b b1       	in	r25, 0x0b	; 11
  92:	9e 7f       	andi	r25, 0xFE	; 254
  94:	9b b9       	out	0x0b, r25	; 11
	LCD_Port |= (1<<EN);				/* Enable pulse */
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	92 60       	ori	r25, 0x02	; 2
  9a:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	32 e0       	ldi	r19, 0x02	; 2
  9e:	3a 95       	dec	r19
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD_Command+0x1e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_Command+0x24>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  a4:	9b b1       	in	r25, 0x0b	; 11
  a6:	9d 7f       	andi	r25, 0xFD	; 253
  a8:	9b b9       	out	0x0b, r25	; 11
  aa:	ef e8       	ldi	r30, 0x8F	; 143
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_Command+0x2e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_Command+0x34>
  b4:	00 00       	nop

	_delay_us(200);

	LCD_Port &= 0x0F;
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	9f 70       	andi	r25, 0x0F	; 15
  ba:	9b b9       	out	0x0b, r25	; 11
	LCD_Port |= (cmnd << 4);  /* sending lower nibble */
  bc:	2b b1       	in	r18, 0x0b	; 11
  be:	f0 e1       	ldi	r31, 0x10	; 16
  c0:	8f 9f       	mul	r24, r31
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	82 2b       	or	r24, r18
  c8:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<EN);
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	32 e0       	ldi	r19, 0x02	; 2
  d2:	3a 95       	dec	r19
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_Command+0x52>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_Command+0x58>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Command+0x62>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Command+0x68>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <LCD_data>:
}


void LCD_data( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
  ec:	9b b1       	in	r25, 0x0b	; 11
  ee:	9f 70       	andi	r25, 0x0F	; 15
  f0:	28 2f       	mov	r18, r24
  f2:	20 7f       	andi	r18, 0xF0	; 240
  f4:	92 2b       	or	r25, r18
  f6:	9b b9       	out	0x0b, r25	; 11
	LCD_Port |= (1<<RS);				/* RS=1, data reg. */
  f8:	9b b1       	in	r25, 0x0b	; 11
  fa:	91 60       	ori	r25, 0x01	; 1
  fc:	9b b9       	out	0x0b, r25	; 11
	LCD_Port|= (1<<EN);
  fe:	9b b1       	in	r25, 0x0b	; 11
 100:	92 60       	ori	r25, 0x02	; 2
 102:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	32 e0       	ldi	r19, 0x02	; 2
 106:	3a 95       	dec	r19
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_data+0x1a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_data+0x20>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	9d 7f       	andi	r25, 0xFD	; 253
 110:	9b b9       	out	0x0b, r25	; 11
 112:	ef e8       	ldi	r30, 0x8F	; 143
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_data+0x2a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_data+0x30>
 11c:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
 11e:	2b b1       	in	r18, 0x0b	; 11
 120:	f0 e1       	ldi	r31, 0x10	; 16
 122:	8f 9f       	mul	r24, r31
 124:	c0 01       	movw	r24, r0
 126:	11 24       	eor	r1, r1
 128:	92 2f       	mov	r25, r18
 12a:	9f 70       	andi	r25, 0x0F	; 15
 12c:	89 2b       	or	r24, r25
 12e:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<EN);
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	82 60       	ori	r24, 0x02	; 2
 134:	8b b9       	out	0x0b, r24	; 11
 136:	32 e0       	ldi	r19, 0x02	; 2
 138:	3a 95       	dec	r19
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_data+0x4c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_data+0x52>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f e9       	ldi	r24, 0x9F	; 159
 146:	9f e0       	ldi	r25, 0x0F	; 15
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_data+0x5c>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_data+0x62>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)					/* LCD Initialize function */
{
	LCD_Dir = 0xFF;						/* Make LCD command port direction as o/p */
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	8a b9       	out	0x0a, r24	; 10
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9c e9       	ldi	r25, 0x9C	; 156
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Init+0x8>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Init+0xe>
 160:	00 00       	nop
	_delay_ms(20);						/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x33);
 162:	83 e3       	ldi	r24, 0x33	; 51
 164:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
	LCD_Command(0x32);		    		/* send for 4 bit initialization of LCD  */
 168:	82 e3       	ldi	r24, 0x32	; 50
 16a:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
	LCD_Command(0x28);              	/* Use 2 line and initialize 5*7 matrix in (4-bit mode)*/
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
	LCD_Command(0x0c);              	/* Display on cursor off*/
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
	LCD_Command(0x06);              	/* Increment cursor (shift cursor to right)*/
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
	LCD_Command(0x01);              	/* Clear display screen*/
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
 186:	8f e9       	ldi	r24, 0x9F	; 159
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_Init+0x38>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Init+0x3e>
 190:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);					/* Cursor 1st row 0th position */
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	0e 94 40 00 	call	0x80	; 0x80 <LCD_Command>
 198:	08 95       	ret

0000019a <main>:
void LCD_data( unsigned char data );

int main()
{

	LCD_Init();							/* Initialization of LCD*/
 19a:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Init>
	DDRC = 0x03;
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	87 b9       	out	0x07, r24	; 7
	DDRB = 0x00;
 1a2:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xff;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	85 b9       	out	0x05, r24	; 5
unsigned char b = 0xff;

	
	
	
	if ((PINC & (1<<PC4)) == 0)
 1a8:	34 99       	sbic	0x06, 4	; 6
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <main+0x18>
	{
		a |= (PINC & 0x0f);
 1ac:	d6 b1       	in	r29, 0x06	; 6
 1ae:	d0 6f       	ori	r29, 0xF0	; 240
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <main+0x1a>
	LCD_Init();							/* Initialization of LCD*/
	DDRC = 0x03;
	DDRB = 0x00;
	PORTB = 0xff;
	
unsigned char a = 0xf0;
 1b2:	d0 ef       	ldi	r29, 0xF0	; 240
 1b4:	cf ef       	ldi	r28, 0xFF	; 255
		a |= (PINC & 0x0f);
	}
	
	while(1)
	{
		if((PINC & (1<<PC4)) != 0)
 1b6:	34 9b       	sbis	0x06, 4	; 6
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <main+0x1c>
		{
		    b |= (PINC & 0x0f);
 1ba:	86 b1       	in	r24, 0x06	; 6
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	c8 2b       	or	r28, r24
			b |= (b<< 4); //b<<4;
 1c0:	20 e1       	ldi	r18, 0x10	; 16
 1c2:	c2 9f       	mul	r28, r18
 1c4:	c0 01       	movw	r24, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	c8 2b       	or	r28, r24
			
			b &= 0xf0;
 1ca:	c0 7f       	andi	r28, 0xF0	; 240
			a = a | b;
 1cc:	dc 2b       	or	r29, r28
			
			LCD_data(a);
 1ce:	8d 2f       	mov	r24, r29
 1d0:	0e 94 76 00 	call	0xec	; 0xec <LCD_data>
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	93 e2       	ldi	r25, 0x23	; 35
 1d8:	24 ef       	ldi	r18, 0xF4	; 244
 1da:	81 50       	subi	r24, 0x01	; 1
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	20 40       	sbci	r18, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x40>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x4a>
 1e4:	00 00       	nop
 1e6:	e7 cf       	rjmp	.-50     	; 0x1b6 <main+0x1c>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
