
Lab5Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000466  000004da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e77  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c7  00000000  00000000  00001443  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e4  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  000021f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000080a  00000000  00000000  00002769  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002f73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  8e:	0c 94 31 02 	jmp	0x462	; 0x462 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_sendCommand>:
	
	unsigned char temp = num >> 4;
	LCD_sendData(lookup_array[temp]);
	temp = num & 0x0F;	// Mask the upper four bits to zeros
	LCD_sendData(lookup_array[temp]);
}
  96:	95 b1       	in	r25, 0x05	; 5
  98:	9f 7e       	andi	r25, 0xEF	; 239
  9a:	95 b9       	out	0x05, r25	; 5
  9c:	95 b1       	in	r25, 0x05	; 5
  9e:	90 7f       	andi	r25, 0xF0	; 240
  a0:	95 b9       	out	0x05, r25	; 5
  a2:	25 b1       	in	r18, 0x05	; 5
  a4:	98 2f       	mov	r25, r24
  a6:	92 95       	swap	r25
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	92 2b       	or	r25, r18
  ac:	95 b9       	out	0x05, r25	; 5
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	90 62       	ori	r25, 0x20	; 32
  b2:	95 b9       	out	0x05, r25	; 5
  b4:	ef ec       	ldi	r30, 0xCF	; 207
  b6:	f7 e0       	ldi	r31, 0x07	; 7
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_sendCommand+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_sendCommand+0x28>
  be:	00 00       	nop
  c0:	95 b1       	in	r25, 0x05	; 5
  c2:	9f 7d       	andi	r25, 0xDF	; 223
  c4:	95 b9       	out	0x05, r25	; 5
  c6:	ef ec       	ldi	r30, 0xCF	; 207
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_sendCommand+0x34>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_sendCommand+0x3a>
  d0:	00 00       	nop
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	95 b9       	out	0x05, r25	; 5
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	89 2b       	or	r24, r25
  de:	85 b9       	out	0x05, r24	; 5
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	8f ec       	ldi	r24, 0xCF	; 207
  e8:	97 e0       	ldi	r25, 0x07	; 7
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_sendCommand+0x54>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_sendCommand+0x5a>
  f0:	00 00       	nop
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8f 7d       	andi	r24, 0xDF	; 223
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	08 95       	ret

000000fa <LCD_sendData>:
  fa:	95 b1       	in	r25, 0x05	; 5
  fc:	90 61       	ori	r25, 0x10	; 16
  fe:	95 b9       	out	0x05, r25	; 5
 100:	95 b1       	in	r25, 0x05	; 5
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	95 b9       	out	0x05, r25	; 5
 106:	25 b1       	in	r18, 0x05	; 5
 108:	98 2f       	mov	r25, r24
 10a:	92 95       	swap	r25
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	92 2b       	or	r25, r18
 110:	95 b9       	out	0x05, r25	; 5
 112:	95 b1       	in	r25, 0x05	; 5
 114:	90 62       	ori	r25, 0x20	; 32
 116:	95 b9       	out	0x05, r25	; 5
 118:	ef ec       	ldi	r30, 0xCF	; 207
 11a:	f7 e0       	ldi	r31, 0x07	; 7
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_sendData+0x22>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_sendData+0x28>
 122:	00 00       	nop
 124:	95 b1       	in	r25, 0x05	; 5
 126:	9f 7d       	andi	r25, 0xDF	; 223
 128:	95 b9       	out	0x05, r25	; 5
 12a:	ef ec       	ldi	r30, 0xCF	; 207
 12c:	f7 e0       	ldi	r31, 0x07	; 7
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_sendData+0x34>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_sendData+0x3a>
 134:	00 00       	nop
 136:	95 b1       	in	r25, 0x05	; 5
 138:	90 7f       	andi	r25, 0xF0	; 240
 13a:	95 b9       	out	0x05, r25	; 5
 13c:	95 b1       	in	r25, 0x05	; 5
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	89 2b       	or	r24, r25
 142:	85 b9       	out	0x05, r24	; 5
 144:	85 b1       	in	r24, 0x05	; 5
 146:	80 62       	ori	r24, 0x20	; 32
 148:	85 b9       	out	0x05, r24	; 5
 14a:	8f ec       	ldi	r24, 0xCF	; 207
 14c:	97 e0       	ldi	r25, 0x07	; 7
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_sendData+0x54>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_sendData+0x5a>
 154:	00 00       	nop
 156:	85 b1       	in	r24, 0x05	; 5
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	08 95       	ret

0000015e <LCD_initiallize>:
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	84 b9       	out	0x04, r24	; 4
 162:	2f e3       	ldi	r18, 0x3F	; 63
 164:	89 e1       	ldi	r24, 0x19	; 25
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <LCD_initiallize+0xa>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_initiallize+0x14>
 172:	00 00       	nop
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	97 e2       	ldi	r25, 0x27	; 39
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_initiallize+0x20>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_initiallize+0x26>
 184:	00 00       	nop
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 18c:	8f ec       	ldi	r24, 0xCF	; 207
 18e:	97 e0       	ldi	r25, 0x07	; 7
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_initiallize+0x32>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_initiallize+0x38>
 196:	00 00       	nop
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 19e:	8f ec       	ldi	r24, 0xCF	; 207
 1a0:	97 e0       	ldi	r25, 0x07	; 7
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_initiallize+0x44>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_initiallize+0x4a>
 1a8:	00 00       	nop
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 1bc:	08 95       	ret

000001be <LCD_printString>:
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	8c 01       	movw	r16, r24
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <LCD_printString+0x16>
 1ce:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
 1d2:	21 96       	adiw	r28, 0x01	; 1
 1d4:	f8 01       	movw	r30, r16
 1d6:	ec 0f       	add	r30, r28
 1d8:	fd 1f       	adc	r31, r29
 1da:	80 81       	ld	r24, Z
 1dc:	81 11       	cpse	r24, r1
 1de:	f7 cf       	rjmp	.-18     	; 0x1ce <LCD_printString+0x10>
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <LCD_printInteger>:
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <LCD_printInteger+0xe>
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <LCD_printInteger+0x10>
 1fa:	1f 92       	push	r1
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	7c 01       	movw	r14, r24
 202:	99 23       	and	r25, r25
 204:	1c f4       	brge	.+6      	; 0x20c <LCD_printInteger+0x22>
 206:	8d e2       	ldi	r24, 0x2D	; 45
 208:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
 20c:	00 e0       	ldi	r16, 0x00	; 0
 20e:	10 e0       	ldi	r17, 0x00	; 0
 210:	01 c0       	rjmp	.+2      	; 0x214 <LCD_printInteger+0x2a>
 212:	8c 01       	movw	r16, r24
 214:	c7 01       	movw	r24, r14
 216:	99 27       	eor	r25, r25
 218:	ea e0       	ldi	r30, 0x0A	; 10
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	bf 01       	movw	r22, r30
 21e:	0e 94 09 02 	call	0x412	; 0x412 <__divmodhi4>
 222:	28 2f       	mov	r18, r24
 224:	c7 01       	movw	r24, r14
 226:	bf 01       	movw	r22, r30
 228:	0e 94 09 02 	call	0x412	; 0x412 <__divmodhi4>
 22c:	7b 01       	movw	r14, r22
 22e:	e1 e0       	ldi	r30, 0x01	; 1
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ec 0f       	add	r30, r28
 234:	fd 1f       	adc	r31, r29
 236:	e0 0f       	add	r30, r16
 238:	f1 1f       	adc	r31, r17
 23a:	20 5d       	subi	r18, 0xD0	; 208
 23c:	20 83       	st	Z, r18
 23e:	c8 01       	movw	r24, r16
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	67 2b       	or	r22, r23
 244:	79 f0       	breq	.+30     	; 0x264 <LCD_printInteger+0x7a>
 246:	85 30       	cpi	r24, 0x05	; 5
 248:	91 05       	cpc	r25, r1
 24a:	19 f7       	brne	.-58     	; 0x212 <LCD_printInteger+0x28>
 24c:	0b c0       	rjmp	.+22     	; 0x264 <LCD_printInteger+0x7a>
 24e:	e1 e0       	ldi	r30, 0x01	; 1
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ec 0f       	add	r30, r28
 254:	fd 1f       	adc	r31, r29
 256:	e0 0f       	add	r30, r16
 258:	f1 1f       	adc	r31, r17
 25a:	80 81       	ld	r24, Z
 25c:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
 260:	01 50       	subi	r16, 0x01	; 1
 262:	11 09       	sbc	r17, r1
 264:	11 23       	and	r17, r17
 266:	9c f7       	brge	.-26     	; 0x24e <LCD_printInteger+0x64>
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	08 95       	ret

00000280 <read_keypad>:
	It returns -1 if none of the keys is pressed, or the 
	index, if the key is pressed.
*/
int8_t read_keypad(void)
{
	PORTD = 0xFF;
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	8b b9       	out	0x0b, r24	; 11
	DDRD = 0xF0;	// Columns are inputs and pulled up. 
 284:	80 ef       	ldi	r24, 0xF0	; 240
 286:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x0F;	// Rows are output and 0
 288:	8f e0       	ldi	r24, 0x0F	; 15
 28a:	8b b9       	out	0x0b, r24	; 11
	
	if((~PIND & 0x0F) == 0x00)	// if none of the cols show any key pressed
 28c:	89 b1       	in	r24, 0x09	; 9
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	8f 70       	andi	r24, 0x0F	; 15
 296:	99 27       	eor	r25, r25
 298:	89 2b       	or	r24, r25
 29a:	39 f1       	breq	.+78     	; 0x2ea <read_keypad+0x6a>
		return(-1);
	else
	{
		uint8_t col = (~PIND & 0x0F);
 29c:	99 b1       	in	r25, 0x09	; 9
 29e:	90 95       	com	r25
 2a0:	9f 70       	andi	r25, 0x0F	; 15
		uint8_t col_idx = 0;
 2a2:	40 e0       	ldi	r20, 0x00	; 0
		while(col != 1)	// A potential blocking statement here
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <read_keypad+0x2a>
		{
			col = col>>1;
 2a6:	96 95       	lsr	r25
			col_idx ++;
 2a8:	4f 5f       	subi	r20, 0xFF	; 255
		return(-1);
	else
	{
		uint8_t col = (~PIND & 0x0F);
		uint8_t col_idx = 0;
		while(col != 1)	// A potential blocking statement here
 2aa:	91 30       	cpi	r25, 0x01	; 1
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <read_keypad+0x26>
		{
			col = col>>1;
			col_idx ++;
		}
		PORTD = 0xFF;
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	8b b9       	out	0x0b, r24	; 11
		DDRD = 0x0F;	// Rows are inputs and pulled up. Cols are output and 0
 2b2:	8f e0       	ldi	r24, 0x0F	; 15
 2b4:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0xF0;
 2b6:	80 ef       	ldi	r24, 0xF0	; 240
 2b8:	8b b9       	out	0x0b, r24	; 11
		uint8_t row = ((~PIND & 0xF0) >> 4);
 2ba:	29 b1       	in	r18, 0x09	; 9
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	20 95       	com	r18
 2c0:	30 95       	com	r19
 2c2:	20 7f       	andi	r18, 0xF0	; 240
 2c4:	33 27       	eor	r19, r19
 2c6:	35 95       	asr	r19
 2c8:	27 95       	ror	r18
 2ca:	35 95       	asr	r19
 2cc:	27 95       	ror	r18
 2ce:	35 95       	asr	r19
 2d0:	27 95       	ror	r18
 2d2:	35 95       	asr	r19
 2d4:	27 95       	ror	r18
		uint8_t row_idx = 0;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
		while(row != 1) // A potential blocking statement here
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <read_keypad+0x5e>
		{
			row = row >> 1;
 2da:	26 95       	lsr	r18
			row_idx ++;
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
		PORTD = 0xFF;
		DDRD = 0x0F;	// Rows are inputs and pulled up. Cols are output and 0
		PORTD = 0xF0;
		uint8_t row = ((~PIND & 0xF0) >> 4);
		uint8_t row_idx = 0;
		while(row != 1) // A potential blocking statement here
 2de:	21 30       	cpi	r18, 0x01	; 1
 2e0:	e1 f7       	brne	.-8      	; 0x2da <read_keypad+0x5a>
		{
			row = row >> 1;
			row_idx ++;
		}
		
		uint8_t key_idx = (4 * row_idx) + col_idx;
 2e2:	88 0f       	add	r24, r24
 2e4:	88 0f       	add	r24, r24
 2e6:	84 0f       	add	r24, r20
		return(key_idx);
 2e8:	08 95       	ret
	PORTD = 0xFF;
	DDRD = 0xF0;	// Columns are inputs and pulled up. 
	PORTD = 0x0F;	// Rows are output and 0
	
	if((~PIND & 0x0F) == 0x00)	// if none of the cols show any key pressed
		return(-1);
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
		
		uint8_t key_idx = (4 * row_idx) + col_idx;
		return(key_idx);
	}
	
 2ec:	08 95       	ret

000002ee <main>:
int8_t read_keypad(void);
unsigned char keypad_lookup_proteus[16] = {'7', '8', '9', '/', '4', '5', '6', 'X', '1', '2', '3', '-', 'C', '0', '=', '+'};
   int main(void)
{
    /* Replace with your application code */
    LCD_initiallize();
 2ee:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_initiallize>
	LCD_printString("LCD Initialized!");
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_printString>
	//_delay_ms(500);
	
	LCD_sendCommand(CLEAR_DISPLAY);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
	LCD_sendCommand(HOME);
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
		int op=0;
		int num2=0;
		int eq=0;
	    int r=0;
	
	DDRD = 0x00;	// set PortC to input
 306:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF;	// Activate the pull up resistors
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	8b b9       	out	0x0b, r24	; 11
	
	while (1) 
    {
		
		num1 = read_keypad();
 30c:	0e 94 40 01 	call	0x280	; 0x280 <read_keypad>
 310:	08 2f       	mov	r16, r24
 312:	88 0f       	add	r24, r24
 314:	11 0b       	sbc	r17, r17
	    if(num1!=-1)
 316:	0f 3f       	cpi	r16, 0xFF	; 255
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	12 07       	cpc	r17, r18
 31c:	31 f0       	breq	.+12     	; 0x32a <main+0x3c>
		LCD_sendData(keypad_lookup_proteus[num1]);
 31e:	f8 01       	movw	r30, r16
 320:	e0 50       	subi	r30, 0x00	; 0
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	80 81       	ld	r24, Z
 326:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	8f e7       	ldi	r24, 0x7F	; 127
 32c:	98 e3       	ldi	r25, 0x38	; 56
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	81 50       	subi	r24, 0x01	; 1
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	20 40       	sbci	r18, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x42>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x4c>
 33a:	00 00       	nop
		_delay_ms(50);

		op = read_keypad();
 33c:	0e 94 40 01 	call	0x280	; 0x280 <read_keypad>
 340:	f8 2e       	mov	r15, r24
 342:	08 2e       	mov	r0, r24
 344:	00 0c       	add	r0, r0
 346:	99 0b       	sbc	r25, r25
		if(op!=-1)
 348:	8f 3f       	cpi	r24, 0xFF	; 255
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	92 07       	cpc	r25, r18
 34e:	31 f0       	breq	.+12     	; 0x35c <main+0x6e>
		LCD_sendData(keypad_lookup_proteus[op]);
 350:	fc 01       	movw	r30, r24
 352:	e0 50       	subi	r30, 0x00	; 0
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	80 81       	ld	r24, Z
 358:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
 35c:	8f e7       	ldi	r24, 0x7F	; 127
 35e:	98 e3       	ldi	r25, 0x38	; 56
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	81 50       	subi	r24, 0x01	; 1
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	20 40       	sbci	r18, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x74>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x7e>
 36c:	00 00       	nop
		_delay_ms(50);
		
		num2 = read_keypad();
 36e:	0e 94 40 01 	call	0x280	; 0x280 <read_keypad>
 372:	c8 2f       	mov	r28, r24
 374:	88 0f       	add	r24, r24
 376:	dd 0b       	sbc	r29, r29
		if(num2!=-1)
 378:	cf 3f       	cpi	r28, 0xFF	; 255
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	d8 07       	cpc	r29, r24
 37e:	31 f0       	breq	.+12     	; 0x38c <main+0x9e>
		LCD_sendData(keypad_lookup_proteus[num2]);
 380:	fe 01       	movw	r30, r28
 382:	e0 50       	subi	r30, 0x00	; 0
 384:	ff 4f       	sbci	r31, 0xFF	; 255
 386:	80 81       	ld	r24, Z
 388:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
 38c:	9f e7       	ldi	r25, 0x7F	; 127
 38e:	28 e3       	ldi	r18, 0x38	; 56
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	91 50       	subi	r25, 0x01	; 1
 394:	20 40       	sbci	r18, 0x00	; 0
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0xa4>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0xae>
 39c:	00 00       	nop
		_delay_ms(50);

		eq = read_keypad();
 39e:	0e 94 40 01 	call	0x280	; 0x280 <read_keypad>
 3a2:	08 2e       	mov	r0, r24
 3a4:	00 0c       	add	r0, r0
 3a6:	99 0b       	sbc	r25, r25
        if(eq!=-1)
 3a8:	8f 3f       	cpi	r24, 0xFF	; 255
 3aa:	2f ef       	ldi	r18, 0xFF	; 255
 3ac:	92 07       	cpc	r25, r18
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <main+0xc4>
 3b0:	ad cf       	rjmp	.-166    	; 0x30c <main+0x1e>
		
		if(eq==10)
 3b2:	8a 30       	cpi	r24, 0x0A	; 10
 3b4:	91 05       	cpc	r25, r1
 3b6:	09 f0       	breq	.+2      	; 0x3ba <main+0xcc>
 3b8:	a9 cf       	rjmp	.-174    	; 0x30c <main+0x1e>
	{	LCD_sendData(keypad_lookup_proteus[eq]);
 3ba:	fc 01       	movw	r30, r24
 3bc:	e0 50       	subi	r30, 0x00	; 0
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	80 81       	ld	r24, Z
 3c2:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_sendData>
		r=num1/num2;
 3c6:	c8 01       	movw	r24, r16
 3c8:	be 01       	movw	r22, r28
 3ca:	0e 94 09 02 	call	0x412	; 0x412 <__divmodhi4>
 3ce:	86 2f       	mov	r24, r22
 3d0:	97 2f       	mov	r25, r23
 3d2:	c6 2f       	mov	r28, r22
 3d4:	d7 2f       	mov	r29, r23
		LCD_printInteger(r);	
 3d6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_printInteger>
 3da:	8f e7       	ldi	r24, 0x7F	; 127
 3dc:	98 e3       	ldi	r25, 0x38	; 56
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	81 50       	subi	r24, 0x01	; 1
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	20 40       	sbci	r18, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <main+0xf2>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <main+0xfc>
 3ea:	00 00       	nop
		_delay_ms(50);
		
		
		switch (op)
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	f8 12       	cpse	r15, r24
 3f0:	8d cf       	rjmp	.-230    	; 0x30c <main+0x1e>
		{
			case 12:
		   {
		     	
		        if(r!=-1)
 3f2:	21 96       	adiw	r28, 0x01	; 1
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <main+0x10a>
 3f6:	8a cf       	rjmp	.-236    	; 0x30c <main+0x1e>
		        {
					LCD_sendCommand(CLEAR_DISPLAY);
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_sendCommand>
 3fe:	2f ef       	ldi	r18, 0xFF	; 255
 400:	84 e3       	ldi	r24, 0x34	; 52
 402:	9c e0       	ldi	r25, 0x0C	; 12
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	7d cf       	rjmp	.-262    	; 0x30c <main+0x1e>

00000412 <__divmodhi4>:
 412:	97 fb       	bst	r25, 7
 414:	07 2e       	mov	r0, r23
 416:	16 f4       	brtc	.+4      	; 0x41c <__divmodhi4+0xa>
 418:	00 94       	com	r0
 41a:	07 d0       	rcall	.+14     	; 0x42a <__divmodhi4_neg1>
 41c:	77 fd       	sbrc	r23, 7
 41e:	09 d0       	rcall	.+18     	; 0x432 <__divmodhi4_neg2>
 420:	0e 94 1d 02 	call	0x43a	; 0x43a <__udivmodhi4>
 424:	07 fc       	sbrc	r0, 7
 426:	05 d0       	rcall	.+10     	; 0x432 <__divmodhi4_neg2>
 428:	3e f4       	brtc	.+14     	; 0x438 <__divmodhi4_exit>

0000042a <__divmodhi4_neg1>:
 42a:	90 95       	com	r25
 42c:	81 95       	neg	r24
 42e:	9f 4f       	sbci	r25, 0xFF	; 255
 430:	08 95       	ret

00000432 <__divmodhi4_neg2>:
 432:	70 95       	com	r23
 434:	61 95       	neg	r22
 436:	7f 4f       	sbci	r23, 0xFF	; 255

00000438 <__divmodhi4_exit>:
 438:	08 95       	ret

0000043a <__udivmodhi4>:
 43a:	aa 1b       	sub	r26, r26
 43c:	bb 1b       	sub	r27, r27
 43e:	51 e1       	ldi	r21, 0x11	; 17
 440:	07 c0       	rjmp	.+14     	; 0x450 <__udivmodhi4_ep>

00000442 <__udivmodhi4_loop>:
 442:	aa 1f       	adc	r26, r26
 444:	bb 1f       	adc	r27, r27
 446:	a6 17       	cp	r26, r22
 448:	b7 07       	cpc	r27, r23
 44a:	10 f0       	brcs	.+4      	; 0x450 <__udivmodhi4_ep>
 44c:	a6 1b       	sub	r26, r22
 44e:	b7 0b       	sbc	r27, r23

00000450 <__udivmodhi4_ep>:
 450:	88 1f       	adc	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	5a 95       	dec	r21
 456:	a9 f7       	brne	.-22     	; 0x442 <__udivmodhi4_loop>
 458:	80 95       	com	r24
 45a:	90 95       	com	r25
 45c:	bc 01       	movw	r22, r24
 45e:	cd 01       	movw	r24, r26
 460:	08 95       	ret

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
