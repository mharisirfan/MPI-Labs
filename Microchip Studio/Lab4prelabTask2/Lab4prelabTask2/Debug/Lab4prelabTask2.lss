
Lab4prelabTask2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091a  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f6  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000343  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021d  00000000  00000000  00001a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001c97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6d 00 	call	0xda	; 0xda <main>
  8e:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_comm>:
		return 0;
	}
}

void lcd_comm(char x){
	PORTD = x;
  96:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1<<RS);
  98:	88 b1       	in	r24, 0x08	; 8
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1<<EN);
  9e:	88 b1       	in	r24, 0x08	; 8
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	81 ee       	ldi	r24, 0xE1	; 225
  a6:	94 e0       	ldi	r25, 0x04	; 4
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_comm+0x12>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_comm+0x18>
  ae:	00 00       	nop
	_delay_ms(5);
	PORTC &= ~(1<<EN);
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	88 b9       	out	0x08, r24	; 8
  b6:	08 95       	ret

000000b8 <lcd_data>:
}

void lcd_data(char x){
	PORTD = x;
  b8:	8b b9       	out	0x0b, r24	; 11
	PORTC |= (1<<RS);
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1<<EN);
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	83 ed       	ldi	r24, 0xD3	; 211
  c8:	90 e3       	ldi	r25, 0x30	; 48
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_data+0x12>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_data+0x18>
  d0:	00 00       	nop
	_delay_ms(50);
	PORTC &= ~(1<<EN);
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	88 b9       	out	0x08, r24	; 8
  d8:	08 95       	ret

000000da <main>:
void lcd_data(char);
void lcd_init (void);


int main(void)
{
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	a0 97       	sbiw	r28, 0x20	; 32
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
	char name[16]={'H','A','R','I','S', 'I','R', 'F', 'A', 'N',' ',' ',' ',' ',' ',' '};
  f2:	80 e1       	ldi	r24, 0x10	; 16
  f4:	e0 e0       	ldi	r30, 0x00	; 0
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	de 01       	movw	r26, r28
  fa:	11 96       	adiw	r26, 0x01	; 1
  fc:	01 90       	ld	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	8a 95       	dec	r24
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x22>
	char rnum[16]={'F','A','1','8','-','B','C','E','-','0','9','0',' ',' ',' ',' '}	;
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	e0 e1       	ldi	r30, 0x10	; 16
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	de 01       	movw	r26, r28
 10c:	51 96       	adiw	r26, 0x11	; 17
 10e:	01 90       	ld	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x34>
	while(1)
	{
	
		DDRD = 0xFF;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	8a b9       	out	0x0a, r24	; 10
		DDRC = 0x03;
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	87 b9       	out	0x07, r24	; 7
		lcd_comm(0x38);  //2 lines
 11e:	88 e3       	ldi	r24, 0x38	; 56
 120:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_comm>
		lcd_comm(0x0C);  //cursor off
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_comm>
		//lcd_comm(0x01);   clear screen
		lcd_comm(0xD80);   //force to first line
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_comm>
	
		for(int i=0; i<16;i++)
 130:	00 e0       	ldi	r16, 0x00	; 0
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	1d c0       	rjmp	.+58     	; 0x170 <main+0x96>
 136:	2f e9       	ldi	r18, 0x9F	; 159
 138:	86 e8       	ldi	r24, 0x86	; 134
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x62>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x6c>
 146:	00 00       	nop
		{
			_delay_ms(500);
			
			lcd_data(name[i]);
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e0 0f       	add	r30, r16
 152:	f1 1f       	adc	r31, r17
 154:	80 81       	ld	r24, Z
 156:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
			lcd_comm(0x06);
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_comm>
			if(i==4)
 160:	04 30       	cpi	r16, 0x04	; 4
 162:	11 05       	cpc	r17, r1
 164:	19 f4       	brne	.+6      	; 0x16c <main+0x92>
			lcd_comm(20);
 166:	84 e1       	ldi	r24, 0x14	; 20
 168:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_comm>
		lcd_comm(0x38);  //2 lines
		lcd_comm(0x0C);  //cursor off
		//lcd_comm(0x01);   clear screen
		lcd_comm(0xD80);   //force to first line
	
		for(int i=0; i<16;i++)
 16c:	0f 5f       	subi	r16, 0xFF	; 255
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 170:	00 31       	cpi	r16, 0x10	; 16
 172:	11 05       	cpc	r17, r1
 174:	04 f3       	brlt	.-64     	; 0x136 <main+0x5c>
			if(i==4)
			lcd_comm(20);
			
			          //increametn cur
		}
		lcd_comm(192);
 176:	80 ec       	ldi	r24, 0xC0	; 192
 178:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_comm>
		for(int j=0; j<16;j++)
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	10 e0       	ldi	r17, 0x00	; 0
 180:	14 c0       	rjmp	.+40     	; 0x1aa <main+0xd0>
 182:	83 ed       	ldi	r24, 0xD3	; 211
 184:	90 e3       	ldi	r25, 0x30	; 48
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0xac>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0xb2>
 18c:	00 00       	nop
		{
			_delay_ms(50);
			
			lcd_data(rnum[j]);
 18e:	e1 e1       	ldi	r30, 0x11	; 17
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	ec 0f       	add	r30, r28
 194:	fd 1f       	adc	r31, r29
 196:	e0 0f       	add	r30, r16
 198:	f1 1f       	adc	r31, r17
 19a:	80 81       	ld	r24, Z
 19c:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_data>
			lcd_comm(0x06);
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_comm>
			lcd_comm(20);
			
			          //increametn cur
		}
		lcd_comm(192);
		for(int j=0; j<16;j++)
 1a6:	0f 5f       	subi	r16, 0xFF	; 255
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	00 31       	cpi	r16, 0x10	; 16
 1ac:	11 05       	cpc	r17, r1
 1ae:	4c f3       	brlt	.-46     	; 0x182 <main+0xa8>
			
			//increametn cur
		}
		return 0;
	}
}
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	a0 96       	adiw	r28, 0x20	; 32
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
